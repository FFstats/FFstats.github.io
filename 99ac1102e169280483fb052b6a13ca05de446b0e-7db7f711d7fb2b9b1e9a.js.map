{"version":3,"sources":["webpack:///./src/components/theme/Input/input.style.js","webpack:///./src/components/theme/Input/index.js","webpack:///./src/hooks/useProtectedRoute.js","webpack:///./src/components/SignUpForm/signUpForm.style.js","webpack:///./src/components/icons/GoogleLogo.js","webpack:///./src/components/SignUpForm/index.js","webpack:///./src/components/theme/Box/index.js","webpack:///./src/images/login-bg.jpg","webpack:///./src/components/theme/customVariant.js","webpack:///./src/components/theme/Button/button.style.js","webpack:///./src/components/theme/Animation/index.js","webpack:///./src/components/theme/Loader/loader.style.js","webpack:///./src/components/theme/Loader/index.js","webpack:///./src/components/theme/Button/index.js","webpack:///./src/components/Alert/index.styled.js","webpack:///./src/components/Alert/index.js"],"names":["InputField","styled","div","themeGet","EyeButton","button","Input","inputElement","htmlFor","label","value","onBlur","onFocus","onChange","inputType","isMaterial","icon","iconPosition","passwordShowHide","className","props","useState","toggle","focus","state","setState","handleOnFocus","event","handleOnBlur","handleOnChange","target","addAllClasses","push","name","replace","toLowerCase","LabelPosition","LabelField","id","type","onClick","join","defaultProps","useProtectedRoute","options","userLogged","redirectTo","useUserStore","user","loading","loaded","setLoaded","userCondition","useEffect","navigate","RegisterFormWrapper","FormCol","GoogleLogo","xmlns","height","viewBox","width","d","fill","RegisterForm","row","col","contentWrapper","btnStyle","logoStyle","handleSubmit","checkboxStyle","descriptionStyle","setAlertText","title","children","createGoogleAccount","Box","Image","src","LoginImage","alt","LogoImage","onSubmit","required","Button","style","background","border","display","alignItems","gap","fontSize","boxShadow","padding","borderRadius","cursor","flexBox","flexWrap","ml","titleStyle","fontWeight","color","letterSpacing","mt","mb","lineHeight","pt","pl","pr","pb","minWidth","outlineBtnStyle","googleButtonStyle","bg","BoxWrapper","base","themed","css","flexDirection","justifyContent","as","module","exports","buttonStyle","variant","key","colorStyle","prop","sizeStyle","ButtonStyle","propTypes","displayName","spinner","keyframes","AnimSpinner","LoaderStyle","span","loaderColor","Loader","disabled","loader","isLoading","buttonIcon","position","icon-position","Alert","aside"],"mappings":"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","file":"99ac1102e169280483fb052b6a13ca05de446b0e-7db7f711d7fb2b9b1e9a.js","sourcesContent":["import styled from 'styled-components';\r\nimport { themeGet } from '@styled-system/theme-get';\r\n\r\nconst InputField = styled.div`\r\n  position: relative;\r\n\r\n  /* Input field wrapper */\r\n  .field-wrapper {\r\n    position: relative;\r\n  }\r\n\r\n  /* If input has icon then these styel */\r\n  &.icon-left,\r\n  &.icon-right {\r\n    .field-wrapper {\r\n      display: flex;\r\n      align-items: center;\r\n      > .input-icon {\r\n        position: absolute;\r\n        top: 0;\r\n        bottom: auto;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        width: 34px;\r\n        height: 40px;\r\n      }\r\n    }\r\n  }\r\n\r\n  /* When icon position in left */\r\n  &.icon-left {\r\n    .field-wrapper {\r\n      > .input-icon {\r\n        left: 0;\r\n        right: auto;\r\n      }\r\n      > input {\r\n        padding-left: 34px;\r\n      }\r\n    }\r\n  }\r\n\r\n  /* When icon position in right */\r\n  &.icon-right {\r\n    .field-wrapper {\r\n      > .input-icon {\r\n        left: auto;\r\n        right: 0;\r\n      }\r\n      > input {\r\n        padding-right: 34px;\r\n      }\r\n    }\r\n  }\r\n\r\n  /* Label default style */\r\n  label {\r\n    display: block;\r\n    color: ${themeGet('colors.labelColor', '#767676')};\r\n    font-size: ${themeGet('fontSizes.4', '16')}px;\r\n    font-weight: ${themeGet('fontWeights.4', '500')};\r\n    margin-bottom: ${themeGet('space.3', '10')}px;\r\n    transition: 0.2s ease all;\r\n  }\r\n\r\n  /* Input and textarea default style */\r\n  textarea,\r\n  input {\r\n    font-size: 16px;\r\n    padding: 11px;\r\n    display: block;\r\n    width: 100%;\r\n    color: ${themeGet('colors.textColor', '#484848')};\r\n    box-shadow: none;\r\n    border-radius: 4px;\r\n    box-sizing: border-box;\r\n    border: 1px solid ${themeGet('colors.inactiveIcon', '#ebebeb')};\r\n    transition: border-color 0.2s ease;\r\n    &:focus {\r\n      outline: none;\r\n      border-color: ${themeGet('colors.primary', '#028489')};\r\n    }\r\n  }\r\n\r\n  textarea {\r\n    min-height: 150px;\r\n  }\r\n\r\n  /* Input material style */\r\n  &.is-material {\r\n    label {\r\n      position: absolute;\r\n      left: 0;\r\n      top: 10px;\r\n    }\r\n\r\n    input,\r\n    textarea {\r\n      border-radius: 0;\r\n      border-top: 0;\r\n      border-left: 0;\r\n      border-right: 0;\r\n      padding-left: 0;\r\n      padding-right: 0;\r\n    }\r\n\r\n    textarea {\r\n      min-height: 40px;\r\n      padding-bottom: 0;\r\n    }\r\n\r\n    .highlight {\r\n      position: absolute;\r\n      height: 1px;\r\n      top: auto;\r\n      left: 50%;\r\n      bottom: 0;\r\n      width: 0;\r\n      pointer-events: none;\r\n      transition: all 0.2s ease;\r\n    }\r\n\r\n    /* If input has icon then these styel */\r\n    &.icon-left,\r\n    &.icon-right {\r\n      .field-wrapper {\r\n        flex-direction: row-reverse;\r\n        > .input-icon {\r\n          width: auto;\r\n        }\r\n        > input {\r\n          flex: 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    /* When icon position in left */\r\n    &.icon-left {\r\n      .field-wrapper {\r\n        > input {\r\n          padding-left: 20px;\r\n        }\r\n      }\r\n      label {\r\n        top: -15px;\r\n        font-size: 12px;\r\n      }\r\n    }\r\n\r\n    /* When icon position in right */\r\n    &.icon-right {\r\n      .field-wrapper {\r\n        > input {\r\n          padding-right: 20px;\r\n        }\r\n      }\r\n    }\r\n\r\n    /* Material input focus style */\r\n    &.is-focus {\r\n      input {\r\n        border-color: ${themeGet('colors.inactiveIcon', '#ebebeb')};\r\n      }\r\n\r\n      label {\r\n        top: -16px;\r\n        font-size: 12px;\r\n        color: ${themeGet('colors.textColor', '#484848')};\r\n      }\r\n\r\n      .highlight {\r\n        width: 100%;\r\n        height: 2px;\r\n        background-color: ${themeGet('colors.primary', '#028489')};\r\n        left: 0;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst EyeButton = styled.button`\r\n  width: 43px;\r\n  height: 40px;\r\n  border: 0;\r\n  padding: 0;\r\n  margin: 0;\r\n  top: 0;\r\n  right: 0;\r\n  position: absolute;\r\n  outline: none;\r\n  cursor: pointer;\r\n  box-shadow: none;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: transparent;\r\n\r\n  > span {\r\n    width: 12px;\r\n    height: 12px;\r\n    display: block;\r\n    border: solid 1px ${themeGet('colors.textColor', '#484848')};\r\n    border-radius: 75% 15%;\r\n    transform: rotate(45deg);\r\n    position: relative;\r\n\r\n    &:before {\r\n      content: '';\r\n      display: block;\r\n      width: 4px;\r\n      height: 4px;\r\n      border-radius: 50%;\r\n      left: 3px;\r\n      top: 3px;\r\n      position: absolute;\r\n      border: solid 1px ${themeGet('colors.textColor', '#484848')};\r\n    }\r\n  }\r\n\r\n  &.eye-closed {\r\n    > span {\r\n      &:after {\r\n        content: '';\r\n        display: block;\r\n        width: 1px;\r\n        height: 20px;\r\n        left: calc(50% - 1px / 2);\r\n        top: -4px;\r\n        position: absolute;\r\n        background-color: ${themeGet('colors.textColor', '#484848')};\r\n        transform: rotate(-12deg);\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport { EyeButton };\r\n\r\nexport default InputField;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport InputField, { EyeButton } from './input.style';\r\nconst Input = ({\r\n    label,\r\n    value,\r\n    onBlur,\r\n    onFocus,\r\n    onChange,\r\n    inputType,\r\n    isMaterial,\r\n    icon,\r\n    iconPosition,\r\n    passwordShowHide,\r\n    className,\r\n    ...props\r\n}) => {\r\n    // use toggle hooks\r\n    const [state, setState] = useState({\r\n        toggle: false,\r\n        focus: false,\r\n        value: value || '',\r\n    });\r\n\r\n    // toggle function\r\n    const handleToggle = () => {\r\n        setState({\r\n            ...state,\r\n            toggle: !state.toggle,\r\n        });\r\n    };\r\n\r\n    // add focus class\r\n    const handleOnFocus = (event) => {\r\n        setState({\r\n            ...state,\r\n            focus: true,\r\n        });\r\n        onFocus(event);\r\n    };\r\n\r\n    // remove focus class\r\n    const handleOnBlur = (event) => {\r\n        setState({\r\n            ...state,\r\n            focus: false,\r\n        });\r\n        onBlur(event);\r\n    };\r\n\r\n    // handle input value\r\n    const handleOnChange = (event) => {\r\n        setState({\r\n            ...state,\r\n            value: event.target.value,\r\n        });\r\n        // onChange(event.target.value);\r\n        onChange(event);\r\n    };\r\n\r\n    // get input focus class\r\n    const getInputFocusClass = () => {\r\n        if (state.focus === true || state.value !== '') {\r\n            return 'is-focus';\r\n        } else {\r\n            return '';\r\n        }\r\n    };\r\n\r\n    // init variable\r\n    let inputElement, htmlFor;\r\n\r\n    // Add all classs to an array\r\n    const addAllClasses = ['reusecore__input'];\r\n\r\n    // Add is-material class\r\n    if (isMaterial) {\r\n        addAllClasses.push('is-material');\r\n    }\r\n\r\n    // Add icon position class if input element has icon\r\n    if (icon && iconPosition) {\r\n        addAllClasses.push(`icon-${iconPosition}`);\r\n    }\r\n\r\n    // Add new class\r\n    if (className) {\r\n        addAllClasses.push(className);\r\n    }\r\n\r\n    // if lable is not empty\r\n    if (label) {\r\n        htmlFor = props.name || label.replace(/\\s+/g, '_').toLowerCase();\r\n    }\r\n\r\n    // Label position\r\n    const LabelPosition = isMaterial === true ? 'bottom' : 'top';\r\n\r\n    // Label field\r\n    const LabelField = label && <label htmlFor={htmlFor}>{label}</label>;\r\n\r\n    // Input type check\r\n    switch (inputType) {\r\n        case 'textarea':\r\n            inputElement = (\r\n                <textarea\r\n                    {...props}\r\n                    id={htmlFor}\r\n                    name={htmlFor}\r\n                    value={state.value}\r\n                    onChange={handleOnChange}\r\n                    onBlur={handleOnBlur}\r\n                    onFocus={handleOnFocus}\r\n                />\r\n            );\r\n            break;\r\n\r\n        case 'password':\r\n            inputElement = (\r\n                <div className=\"field-wrapper\">\r\n                    <input\r\n                        {...props}\r\n                        id={htmlFor}\r\n                        name={htmlFor}\r\n                        type={'password'}\r\n                        value={state.value}\r\n                        onChange={handleOnChange}\r\n                        onBlur={handleOnBlur}\r\n                        onFocus={handleOnFocus}\r\n                    />\r\n                    {passwordShowHide && (\r\n                        <EyeButton\r\n                            onClick={handleToggle}\r\n                            className={state.toggle ? 'eye' : 'eye-closed'}\r\n                        >\r\n                            <span />\r\n                        </EyeButton>\r\n                    )}\r\n                </div>\r\n            );\r\n            break;\r\n\r\n        default:\r\n            inputElement = (\r\n                <div className=\"field-wrapper\">\r\n                    <input\r\n                        {...props}\r\n                        id={htmlFor}\r\n                        name={htmlFor}\r\n                        type={inputType}\r\n                        value={state.value}\r\n                        onChange={handleOnChange}\r\n                        onBlur={handleOnBlur}\r\n                        onFocus={handleOnFocus}\r\n                    />\r\n                    {icon && <span className=\"input-icon\">{icon}</span>}\r\n                </div>\r\n            );\r\n    }\r\n\r\n    return (\r\n        <InputField className={`${addAllClasses.join(' ')} ${getInputFocusClass()}`}>\r\n            {LabelPosition === 'top' && LabelField}\r\n            {inputElement}\r\n            {isMaterial && <span className=\"highlight\" />}\r\n            {LabelPosition === 'bottom' && LabelField}\r\n        </InputField>\r\n    );\r\n};\r\n\r\n/** Inout prop type checking. */\r\nInput.propTypes = {\r\n    /** className of the Input component. */\r\n    className: PropTypes.string,\r\n\r\n    /** Set input label value. */\r\n    label: PropTypes.string,\r\n\r\n    /** The input value, required for a controlled component. */\r\n    value: PropTypes.any,\r\n\r\n    /** Make default input into material style input. */\r\n    isMaterial: PropTypes.bool,\r\n\r\n    /** Password show hide icon button prop [*only for password field]. */\r\n    passwordShowHide: PropTypes.bool,\r\n\r\n    /** Set input type of the input element. Default type is text. */\r\n    inputType: PropTypes.oneOf(['text', 'email', 'password', 'number', 'textarea']),\r\n\r\n    /** Add icon in input field. This prop will not work with password\r\n     * and textarea field.\r\n     */\r\n    icon: PropTypes.object,\r\n\r\n    /** Set input field icon position. Default position is 'left'. */\r\n    iconPosition: PropTypes.oneOf(['left', 'right']),\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    onBlur: PropTypes.func,\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    onFocus: PropTypes.func,\r\n\r\n    /**\r\n     * Callback fired when the value is changed.\r\n     *\r\n     * @param {object} event The event source of the callback.\r\n     * You can pull out the new value by accessing `event.target.value`.\r\n     */\r\n    onChange: PropTypes.func,\r\n};\r\n\r\n/** Inout default type. */\r\nInput.defaultProps = {\r\n    inputType: 'text',\r\n    isMaterial: false,\r\n    iconPosition: 'left',\r\n    onBlur: () => {},\r\n    onFocus: () => {},\r\n    onChange: () => {},\r\n};\r\n\r\nexport default Input;\r\n","import { useUserStore } from '../store/user';\r\nimport { useEffect, useState } from 'react';\r\nimport { navigate } from 'gatsby';\r\n\r\nexport function useProtectedRoute(options = {}) {\r\n    const { userLogged = true, redirectTo = '/log-in' } = options;\r\n\r\n    const [user, loading] = useUserStore((state) => [state.user, state.loading]);\r\n    const [loaded, setLoaded] = useState(!loading);\r\n    const userCondition = userLogged ? !!user : !user;\r\n\r\n    useEffect(() => {\r\n        if (!loading && !userCondition) {\r\n            navigate(redirectTo);\r\n        } else {\r\n            setLoaded(!loading);\r\n        }\r\n    }, [loading]);\r\n\r\n    return { loaded };\r\n}\r\n","import styled from 'styled-components';\r\nimport { themeGet } from '@styled-system/theme-get';\r\n\r\nconst RegisterFormWrapper = styled.div`\r\n    /* width: 80%; */\r\n    margin: auto;\r\n    border-radius: 5px;\r\n    overflow: hidden;\r\n    background-color: ${themeGet('colors.white', '#ffffff')};\r\n    .col {\r\n        position: relative;\r\n        .patternImage {\r\n            position: absolute;\r\n            width: 100%;\r\n            height: 100%;\r\n            object-fit: cover;\r\n        }\r\n        @media only screen and (max-width: 991px) {\r\n            width: 100%;\r\n            &.imageCol {\r\n                display: none;\r\n            }\r\n        }\r\n    }\r\n    .reusecore__button {\r\n        background-color: transparent;\r\n        &.default {\r\n            background-color: rgb(26, 115, 232);\r\n            transition: all 0.3s ease;\r\n            &:hover {\r\n                box-shadow: 0px 9px 20px -5px rgba(26, 115, 232, 0.57);\r\n            }\r\n        }\r\n    }\r\n\r\n    .rc-tabs {\r\n        border: 0;\r\n        max-width: 360px;\r\n        margin: 30px 0 0;\r\n        @media only screen and (max-width: 991px) {\r\n            max-width: 100%;\r\n        }\r\n        .rc-tabs-bar {\r\n            margin-left: 15px;\r\n        }\r\n        .rc-tabs-nav-container {\r\n            padding: 0;\r\n            .rc-tabs-tab-prev,\r\n            .rc-tabs-tab-next {\r\n                display: none;\r\n            }\r\n            .rc-tabs-nav-scroll,\r\n            .rc-tabs-nav {\r\n                width: 100%;\r\n                .rc-tabs-tab {\r\n                    width: 50%;\r\n                    margin-right: 0;\r\n                    padding: 13px 0;\r\n                    text-align: center;\r\n                }\r\n            }\r\n        }\r\n        .rc-tabs-tabpane {\r\n            padding-left: 15px;\r\n            padding-bottom: 15px;\r\n            padding-right: 15px;\r\n            @media (min-width: 1200px) {\r\n                min-height: 560px;\r\n            }\r\n        }\r\n        .google-login__btn {\r\n            width: 100%;\r\n            font-size: 15px;\r\n            font-weight: 700;\r\n            margin-bottom: 45px;\r\n            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\r\n            .btn-icon {\r\n                position: relative;\r\n                left: -22px;\r\n                img {\r\n                    width: 21px;\r\n                    height: auto;\r\n                }\r\n            }\r\n        }\r\n        .reusecore__input {\r\n            margin-bottom: 30px;\r\n            &.is-material {\r\n                &.is-focus {\r\n                    label {\r\n                        color: rgb(26, 115, 232);\r\n                        top: -12px;\r\n                    }\r\n                    .highlight {\r\n                        background-color: rgb(26, 115, 232);\r\n                    }\r\n                }\r\n            }\r\n\r\n            label {\r\n                font-weight: 400;\r\n                font-size: 14px;\r\n                color: rgba(0, 0, 0, 0.6);\r\n                top: 15px;\r\n            }\r\n        }\r\n        .reusecore__checkbox {\r\n            margin: 0 0 35px;\r\n            label {\r\n                .reusecore__field-label {\r\n                    font-size: 13px;\r\n                    font-weight: 400;\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const FormCol = styled.div`\r\n    h1 {\r\n        font-weight: normal;\r\n        margin: 0.75rem 0 1rem 0;\r\n    }\r\n\r\n    input {\r\n        margin-bottom: 1.5rem;\r\n    }\r\n\r\n    button {\r\n        margin: 1rem 0;\r\n    }\r\n\r\n    @media (max-width: 768px) {\r\n        margin-top: auto;\r\n    }\r\n`;\r\n\r\nexport default RegisterFormWrapper;\r\n","import React from 'react';\r\n\r\nconst GoogleLogo = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n            <path\r\n                d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\r\n                fill=\"#4285F4\"\r\n            />\r\n            <path\r\n                d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\r\n                fill=\"#34A853\"\r\n            />\r\n            <path\r\n                d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\r\n                fill=\"#FBBC05\"\r\n            />\r\n            <path\r\n                d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\r\n                fill=\"#EA4335\"\r\n            />\r\n            <path d=\"M1 1h22v22H1z\" fill=\"none\" />\r\n        </svg>\r\n    );\r\n};\r\n\r\nexport default GoogleLogo;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Box from '../theme/Box/index';\r\nimport Input from '../theme/Input/index';\r\nimport Button from '../theme/Button/index';\r\nimport Image from '../theme/Image/index';\r\nimport RegisterFormWrapper, { FormCol } from './signUpForm.style';\r\nimport 'rc-tabs/assets/index.css';\r\nimport LogoImage from '../../images/logo.jpeg';\r\nimport LoginImage from '../../images/login-bg.jpg';\r\nimport GoogleLogo from '../icons/GoogleLogo';\r\nimport { useUserStore } from '../../store/user';\r\n\r\nconst RegisterForm = ({\r\n    row,\r\n    col,\r\n    contentWrapper,\r\n    btnStyle,\r\n    logoStyle,\r\n    checkboxStyle,\r\n    descriptionStyle,\r\n    setAlertText,\r\n    handleSubmit,\r\n    title,\r\n    children,\r\n}) => {\r\n    const hasloaded = true;\r\n    const [createGoogleAccount] = useUserStore((state) => [state.createGoogleAccount]);\r\n\r\n    return (\r\n        <RegisterFormWrapper>\r\n            <Box className=\"row\" {...row}>\r\n                <Box className=\"col imageCol h-100\" {...col}>\r\n                    <Image className=\"patternImage\" src={LoginImage} alt=\"Login Banner\" />\r\n                </Box>\r\n                <Box className=\"col tabCol\" {...col}>\r\n                    <Box {...contentWrapper}>\r\n                        {hasloaded && (\r\n                            <FormCol>\r\n                                <Image src={LogoImage} {...logoStyle} alt=\"Logo\" />\r\n                                <br></br>\r\n                                {/* <Text content={`${message.content}`} {...descriptionStyle} /> */}\r\n\r\n                                <form onSubmit={handleSubmit}>\r\n                                    <h2> {title} </h2>\r\n\r\n                                    <Input\r\n                                        name=\"email\"\r\n                                        inputType=\"email\"\r\n                                        isMaterial\r\n                                        type=\"email\"\r\n                                        label=\"Email\"\r\n                                        required\r\n                                    />\r\n                                    <Input\r\n                                        name=\"password\"\r\n                                        inputType=\"password\"\r\n                                        isMaterial\r\n                                        type=\"password\"\r\n                                        label=\"Password\"\r\n                                        required\r\n                                    />\r\n\r\n                                    <div>\r\n                                        <Button\r\n                                            className=\"default\"\r\n                                            type=\"submit\"\r\n                                            title=\"Submit\"\r\n                                            {...btnStyle}\r\n                                        />\r\n                                    </div>\r\n                                    <div>\r\n                                        <button\r\n                                            style={{\r\n                                                background: 'white',\r\n                                                border: '0px',\r\n                                                display: 'flex',\r\n                                                alignItems: 'center',\r\n                                                gap: '8px',\r\n                                                fontSize: '20px',\r\n                                                boxShadow: '2px 0px 5px 0px rgba(0,0,0,0.23)',\r\n                                                padding: '8px',\r\n                                                borderRadius: '2px',\r\n                                                cursor: 'pointer',\r\n                                            }}\r\n                                            onClick={createGoogleAccount}\r\n                                            type=\"button\"\r\n                                        >\r\n                                            <GoogleLogo />\r\n                                            {title} with Google\r\n                                        </button>\r\n                                        <div>{children}</div>\r\n                                    </div>\r\n                                </form>\r\n                            </FormCol>\r\n                        )}\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        </RegisterFormWrapper>\r\n    );\r\n};\r\n\r\nRegisterForm.propTypes = {\r\n    row: PropTypes.object,\r\n    col: PropTypes.object,\r\n    logoStyle: PropTypes.object,\r\n    titleStyle: PropTypes.object,\r\n    hintTextStyle: PropTypes.object,\r\n    contentWrapper: PropTypes.object,\r\n    descriptionStyle: PropTypes.object,\r\n    googleButtonStyle: PropTypes.object,\r\n    checkboxStyle: PropTypes.object,\r\n};\r\n\r\n// LoginModal default style\r\nRegisterForm.defaultProps = {\r\n    // Team member row default style\r\n    row: {\r\n        flexBox: true,\r\n        flexWrap: 'wrap',\r\n    },\r\n    // Team member col default style\r\n    col: {\r\n        width: [1, 1 / 2],\r\n    },\r\n    // Default logo size\r\n    logoStyle: {\r\n        width: '350px',\r\n        height: 'auto',\r\n        ml: '15px',\r\n    },\r\n    // Title default style\r\n    titleStyle: {\r\n        fontSize: ['22px', '36px', '50px'],\r\n        fontWeight: '400',\r\n        color: '#20201D',\r\n        letterSpacing: '-0.025em',\r\n        mt: '35px',\r\n        mb: '10px',\r\n    },\r\n    // Description default style\r\n    descriptionStyle: {\r\n        color: 'red',\r\n        fontSize: '16px',\r\n        lineHeight: '26px',\r\n        letterSpacing: '-0.025em',\r\n        mb: '23px',\r\n        ml: '1px',\r\n    },\r\n    // Content wrapper style\r\n    contentWrapper: {\r\n        pt: ['32px', '56px'],\r\n        pl: ['17px', '32px', '38px', '40px', '56px'],\r\n        pr: '32px',\r\n        pb: ['32px', '56px'],\r\n    },\r\n    // Default button style\r\n    btnStyle: {\r\n        minWidth: '156px',\r\n        fontSize: '14px',\r\n        fontWeight: '500',\r\n    },\r\n    // Outline button outline style\r\n    outlineBtnStyle: {\r\n        minWidth: '156px',\r\n        fontSize: '14px',\r\n        fontWeight: '500',\r\n        color: 'rgb(26, 115, 232)',\r\n    },\r\n    // Google button style\r\n    googleButtonStyle: {\r\n        bg: '#ffffff',\r\n        color: '#343D48',\r\n    },\r\n    //Checkbox style\r\n    checkboxStyle: {\r\n        mb: '23px',\r\n    },\r\n};\r\n\r\nexport default RegisterForm;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, { css } from 'styled-components';\r\nimport {\r\n  flexWrap,\r\n  flexDirection,\r\n  alignItems,\r\n  justifyContent,\r\n} from 'styled-system';\r\nimport { base, themed } from '../base';\r\n\r\nconst BoxWrapper = styled('div')(\r\n  base,\r\n  themed('Box'),\r\n  props =>\r\n    props.flexBox &&\r\n    css(\r\n      { display: 'flex' },\r\n      flexWrap,\r\n      flexDirection,\r\n      alignItems,\r\n      justifyContent,\r\n      themed('FlexBox')\r\n    )\r\n);\r\n\r\nconst Box = ({ children, ...props }) => (\r\n  <BoxWrapper {...props}>{children}</BoxWrapper>\r\n);\r\n\r\nexport default Box;\r\n\r\nBox.propTypes = {\r\n  children: PropTypes.any.isRequired,\r\n  /** Using this props we can convert our Box Component to a Flex Container or Component */\r\n  flexBox: PropTypes.bool,\r\n  as: PropTypes.oneOf([\r\n    'div',\r\n    'article',\r\n    'section',\r\n    'address',\r\n    'header',\r\n    'footer',\r\n    'nav',\r\n    'main',\r\n  ]),\r\n  width: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.arrayOf(\r\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n    ),\r\n  ]),\r\n  height: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.arrayOf(\r\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n    ),\r\n  ]),\r\n  fontSize: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.arrayOf(\r\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n    ),\r\n  ]),\r\n  color: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.arrayOf(\r\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n    ),\r\n  ]),\r\n  flex: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.arrayOf(\r\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n    ),\r\n  ]),\r\n  order: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.arrayOf(\r\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n    ),\r\n  ]),\r\n  alignSelf: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.arrayOf(\r\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n    ),\r\n  ]),\r\n  display: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.arrayOf(\r\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n    ),\r\n  ]),\r\n  border: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.arrayOf(\r\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n    ),\r\n  ]),\r\n  borderTop: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.arrayOf(\r\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n    ),\r\n  ]),\r\n  borderRight: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.arrayOf(\r\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n    ),\r\n  ]),\r\n  borderBottom: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.arrayOf(\r\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n    ),\r\n  ]),\r\n  borderLeft: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.arrayOf(\r\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n    ),\r\n  ]),\r\n  borderColor: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.arrayOf(\r\n      PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n    ),\r\n  ]),\r\n};\r\n\r\nBox.defaultProps = {\r\n  as: 'div',\r\n};\r\n","module.exports = __webpack_public_path__ + \"static/login-bg-be2e9a02a773eac061cd01d2724c9825.jpg\";","import { variant } from 'styled-system';\r\n\r\nconst buttonStyle = variant({\r\n  key: 'buttonStyles',\r\n});\r\n\r\nconst colorStyle = variant({\r\n  key: 'colorStyles',\r\n  prop: 'colors',\r\n});\r\n\r\nconst sizeStyle = variant({\r\n  key: 'sizeStyles',\r\n  prop: 'size',\r\n});\r\n\r\nexport const cards = variant({ key: 'cards' });\r\n\r\nexport { buttonStyle, colorStyle, sizeStyle };\r\n","import styled from 'styled-components';\r\nimport { variant, alignItems, boxShadow } from 'styled-system';\r\nimport { themeGet } from '@styled-system/theme-get';\r\nimport { buttonStyle, colorStyle, sizeStyle } from '../customVariant';\r\nimport { base } from '../base';\r\n\r\nconst ButtonStyle = styled.button`\r\n  /* button default style */\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: ${themeGet('colors.white', '#ffffff')};\r\n  background-color: ${themeGet('colors.primary', '#028489')};\r\n  min-height: ${themeGet('heights.3', '48')}px;\r\n  min-width: ${themeGet('widths.3', '48')}px;\r\n  border-radius: ${themeGet('radius.0', '3')}px;\r\n  font-family: inherit;\r\n  font-size: ${themeGet('fontSizes.4', '16')}px;\r\n  font-weight: ${themeGet('fontWeights.4', '500')};\r\n  text-decoration: none;\r\n  text-transform: capitalize;\r\n  padding-top: ${themeGet('space.2', '8')}px;\r\n  padding-bottom: ${themeGet('space.2', '8')}px;\r\n  padding-left: ${themeGet('space.4', '15')}px;\r\n  padding-right: ${themeGet('space.4', '15')}px;\r\n  border: 0;\r\n  transition: all 0.3s ease;\r\n  span.btn-text {\r\n    padding-left: ${themeGet('space.1', '4')}px;\r\n    padding-right: ${themeGet('space.1', '4')}px;\r\n  }\r\n  span.btn-icon {\r\n    display: flex;\r\n    > div {\r\n      display: flex !important;\r\n    }\r\n  }\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n\r\n  /* Material style goes here */\r\n  &.is-material {\r\n    box-shadow: 0px 1px 5px 0px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 3px 1px -2px rgba(0, 0, 0, 0.12);\r\n  }\r\n\r\n  /* When button on loading stage */\r\n  &.is-loading {\r\n    .btn-text {\r\n      padding-left: ${themeGet('space.2', '8')}px;\r\n      padding-right: ${themeGet('space.2', '8')}px;\r\n    }\r\n  }\r\n\r\n  /* Style system support */\r\n  ${alignItems}\r\n  ${boxShadow}\r\n  ${buttonStyle}\r\n  ${colorStyle}\r\n  ${sizeStyle}\r\n  ${base}\r\n\r\n  &:disabled{\r\n    cursor: default;\r\n    background: gray !important;\r\n    pointer-events: none;\r\n    opacity: 0.8;\r\n  }\r\n`;\r\n\r\n// prop types can also be added from the style functions\r\nButtonStyle.propTypes = {\r\n    ...alignItems.propTypes,\r\n    ...boxShadow.propTypes,\r\n    ...variant.propTypes,\r\n};\r\n\r\nButtonStyle.displayName = 'ButtonStyle';\r\n\r\nexport default ButtonStyle;\r\n","import { css, keyframes } from 'styled-components';\r\n\r\nconst spinner = keyframes`\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  50% {\r\n    transform: rotate(180deg);\r\n    opacity: 0.5;\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n`;\r\n\r\nconst AnimSpinner = css`\r\n  animation: ${spinner} 1s linear infinite;\r\n`;\r\n\r\nexport { AnimSpinner };\r\n","import styled from 'styled-components';\r\nimport { variant } from 'styled-system';\r\nimport { colorStyle } from '../customVariant';\r\nimport { AnimSpinner } from '../Animation';\r\nimport { base } from '../base';\r\n\r\nconst LoaderStyle = styled.span`\r\n  /* loader default style */\r\n  display: inline-flex;\r\n  width: 14px;\r\n  height: 14px;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  border-width: 2px;\r\n  border-style: solid;\r\n  border-color: ${props => (props.loaderColor ? props.loaderColor : '#000000')};\r\n  border-top-color: transparent !important;\r\n\r\n  /* animation goes here */\r\n  ${AnimSpinner}\r\n  /* Style system custome color variant */\r\n  ${colorStyle}\r\n  ${base}\r\n`;\r\n\r\n// prop types can also be added from the style functions\r\nLoaderStyle.propTypes = {\r\n  ...variant.propTypes,\r\n};\r\n\r\nLoaderStyle.displayName = 'LoaderStyle';\r\n\r\nexport default LoaderStyle;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LoaderStyle from './loader.style';\r\n\r\nconst Loader = ({ loaderColor, className, ...props }) => {\r\n  // Add all classs to an array\r\n  const addAllClasses = ['reusecore__loader'];\r\n\r\n  // className prop checking\r\n  if (className) {\r\n    addAllClasses.push(className);\r\n  }\r\n  return (\r\n    <LoaderStyle\r\n      className={addAllClasses.join(' ')}\r\n      loaderColor={loaderColor}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nLoader.propTypes = {\r\n  /** ClassName of the Loader */\r\n  className: PropTypes.string,\r\n\r\n  /** Set loader width in number || string */\r\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n\r\n  /** Set loader height in number || string */\r\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n\r\n  /** Set color for loader */\r\n  loaderColor: PropTypes.string,\r\n};\r\n\r\nLoader.defaultProps = {};\r\n\r\nexport default Loader;\r\n","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ButtonStyle from './button.style';\r\nimport Loader from '../Loader';\r\n\r\nconst Button = ({\r\n  type,\r\n  title,\r\n  icon,\r\n  disabled,\r\n  iconPosition,\r\n  onClick,\r\n  loader,\r\n  loaderColor,\r\n  isMaterial,\r\n  isLoading,\r\n  className,\r\n  ...props\r\n}) => {\r\n  // Add all classs to an array\r\n  const addAllClasses = ['reusecore__button'];\r\n\r\n  // isLoading prop checking\r\n  if (isLoading) {\r\n    addAllClasses.push('is-loading');\r\n  }\r\n\r\n  // isMaterial prop checking\r\n  if (isMaterial) {\r\n    addAllClasses.push('is-material');\r\n  }\r\n\r\n  // className prop checking\r\n  if (className) {\r\n    addAllClasses.push(className);\r\n  }\r\n\r\n  // Checking button loading state\r\n  const buttonIcon =\r\n    isLoading !== false ? (\r\n      <Fragment>\r\n        {loader ? loader : <Loader loaderColor={loaderColor || '#30C56D'} />}\r\n      </Fragment>\r\n    ) : (\r\n      icon && <span className=\"btn-icon\">{icon}</span>\r\n    );\r\n\r\n  // set icon position\r\n  const position = iconPosition || 'right';\r\n\r\n  return (\r\n    <ButtonStyle\r\n      type={type}\r\n      className={addAllClasses.join(' ')}\r\n      icon={icon}\r\n      disabled={disabled}\r\n      icon-position={position}\r\n      onClick={onClick}\r\n      {...props}\r\n    >\r\n      {position === 'left' && buttonIcon}\r\n      {title && <span className=\"btn-text\">{title}</span>}\r\n      {position === 'right' && buttonIcon}\r\n    </ButtonStyle>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  /** ClassName of the button */\r\n  className: PropTypes.string,\r\n\r\n  /** Add icon */\r\n  type: PropTypes.oneOf(['button', 'submit', 'reset']),\r\n\r\n  /** Add icon */\r\n  icon: PropTypes.object,\r\n\r\n  /** Add loader */\r\n  loader: PropTypes.object,\r\n\r\n  /** Add Material effect */\r\n  isMaterial: PropTypes.bool,\r\n\r\n  /** Button Loading state */\r\n  isLoading: PropTypes.bool,\r\n\r\n  /** Button Loading state */\r\n  loaderColor: PropTypes.string,\r\n\r\n  /** If true button will be disabled */\r\n  disabled: PropTypes.bool,\r\n\r\n  /** Adjust your icon and loader position [if you use loader] */\r\n  iconPosition: PropTypes.oneOf(['left', 'right']),\r\n\r\n  /** Variant change button shape */\r\n  variant: PropTypes.oneOf(['textButton', 'outlined', 'fab', 'extendedFab']),\r\n\r\n  /** primary || secondary || warning || error  change text and border color.\r\n   *  And primaryWithBg || secondaryWithBg || warningWithBg || errorWithBg change text, border and background color */\r\n  colors: PropTypes.oneOf([\r\n    'primary',\r\n    'secondary',\r\n    'warning',\r\n    'error',\r\n    'primaryWithBg',\r\n    'secondaryWithBg',\r\n    'warningWithBg',\r\n    'errorWithBg',\r\n  ]),\r\n\r\n  /**\r\n   * Gets called when the user clicks on the button\r\n   */\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nButton.defaultProps = {\r\n  disabled: false,\r\n  isMaterial: false,\r\n  isLoading: false,\r\n  type: 'button',\r\n};\r\n\r\nexport default Button;\r\n","import styled from 'styled-components';\r\n\r\nexport const Alert = styled.aside`\r\n    width: 100%;\r\n    padding: 1rem 0;\r\n    text-align: center;\r\n    font-size: 1.5rem;\r\n    background: #c1362d;\r\n    color: white;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 100;\r\n`;\r\n","import React from 'react';\r\nimport { Alert as AlertComponent } from './index.styled';\r\n\r\nconst Alert = ({ children }) => {\r\n    return <AlertComponent>{children}</AlertComponent>;\r\n};\r\n\r\nexport default Alert;\r\n"],"sourceRoot":""}