{"version":3,"sources":["webpack:///./src/components/SeasonRecord/index.js","webpack:///./src/pages/seasonrecords.js","webpack:///./node_modules/lodash/maxBy.js","webpack:///./node_modules/lodash/_baseAggregator.js","webpack:///./node_modules/lodash/_createAggregator.js","webpack:///./node_modules/lodash/_baseGt.js","webpack:///./node_modules/lodash/groupBy.js","webpack:///./node_modules/lodash/_baseExtremum.js","webpack:///./node_modules/lodash/minBy.js","webpack:///./node_modules/lodash/_baseAssignValue.js","webpack:///./node_modules/lodash/_baseLt.js","webpack:///./node_modules/lodash/_arrayAggregator.js"],"names":["SeasonRecord","props","React","createElement","className","title","label","data","map","item","i","Fragment","key","alt","src","image","onError","ev","target","name","year","wins","loses","pct","scoreFor","scoreAgaisnt","avgPoints","scoreTimes","SeasonRecords","query","games","allGamesJson","nodes","owners","allOwnersJson","items","setItems","useState","topWins","setTopWins","topLoses","setTopLoses","topScores","setTopScores","bottomScores","setBottomScores","topScoresAgaisnt","setTopScoresAgaisnt","bottomScoresAgaisnt","setBottomScoresAgaisnt","topPCT","setTopPCT","bottomPCT","setBottomPCT","topAVGPoints","setTopAVGPoints","bottomAVGPoints","setBottomAVGPoints","maxScoreWeekSeason","setMaxScoreWeekSeason","minScoreWeekSeason","setMinScoreWeekSeason","topMeanScoresWeekSeason","setTopMeanScoresWeekSeason","bottomMeanScoresWeekSeason","setBottomMeanScoresWeekSeason","seasonStats","useEffect","gamesByOwners","gamesByOwnerFunc","scoresByOwner","scoresOwners","scoresYearsWeeks","_groupBy","game","seasonWeekStats","Object","keys","forEach","maxScoresWeek","_maxBy","o","score","minScoresWeek","_minBy","topMeanScoresWeek","_takeRight","_sortBy","length","bottomMeanScoresWeek","_take","push","id","seasonWeekYearStats","week","countTopMeanScore","countBottomMeanScore","countMaxScore","countMinScore","element","meanScore","entries","_ref","ownerID","val","scoreOwner","_find","_ref2","_ref3","_ref4","owner","gamesOwnersYears","season","seasonOutcome","console","log","_orderBy","Layout","Breadcrumb","onChange","e","value","baseExtremum","baseGt","baseIteratee","module","exports","array","iteratee","undefined","baseEach","collection","setter","accumulator","arrayAggregator","baseAggregator","isArray","initializer","func","other","baseAssignValue","createAggregator","hasOwnProperty","prototype","groupBy","result","call","isSymbol","comparator","index","current","computed","baseLt","defineProperty","object"],"mappings":"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","file":"component---src-pages-seasonrecords-js-4d796bec66bb268bee47.js","sourcesContent":["import React from 'react';\r\n\r\nimport './_season-record.scss';\r\n\r\nconst SeasonRecord = (props) =>\r\n  (<div className=\"col-lg-6 records\">\r\n    <div className=\"row mx-lg-2 mb-5 mb-lg-2 clippedbox--color-dark-small text-center\">\r\n      <h2 className=\"heading--gray my-4 col-12\">{props.title}</h2>\r\n      <div className=\"col-6 px-0 mb-1\">\r\n        <p className=\"heading--gray\">Team</p>\r\n      </div>\r\n      <div className=\"col-3 px-0\">\r\n        <p className=\"heading--gray\">Year</p>\r\n      </div>\r\n      <div className=\"col-3 px-0\">\r\n        <p className=\"heading--gray\">{props.label}</p>\r\n      </div>\r\n        {props.data.map((item, i) =>(\r\n          <React.Fragment key={i}>\r\n            <div className=\"col-12 alt\">\r\n              <div className=\"row flex-center\">\r\n            <div className=\"col-6 flex-center pr-0\">\r\n              <p  className=\"rank-number\">{i + 1}</p>\r\n                  <img alt=\"team-logo\" src={item.image} className=\"image\" onError={function (ev) { \r\n                    ev.target.src = \"https://fantasy-franchise.com/img/DEF.png\";\r\n                    }} />\r\n              <p className=\"name\">{item.name}</p>\r\n            </div>\r\n            <div className=\"col-3 px-0 text-center\">\r\n              <p>{item.year}</p>\r\n            </div>\r\n            <div className= \"col-3 px-0 text-center\">\r\n            {props.label === \"Wins\" && <p>{item.wins}</p>}\r\n            {props.label === \"Loses\" && <p>{item.loses}</p>}\r\n            {props.label === \"Percentage\" && <p>{item.pct}</p>}\r\n            {props.title === \"Most Points\" && <p>{item.scoreFor}</p>}\r\n            {props.title === \"Less Points\" && <p>{item.scoreFor}</p>}\r\n            {props.title === \"Most Points Agaisnt\" && <p>{item.scoreAgaisnt}</p>}\r\n            {props.title === \"Less Points Agaisnt\" && <p>{item.scoreAgaisnt}</p>}\r\n            {props.title === \"Most Points Avg/Game\" && <p>{item.avgPoints}</p>}\r\n            {props.title === \"Less Points Avg/Game\" && <p>{item.avgPoints}</p>}\r\n            {props.label === \"Times\" && <p>{item.scoreTimes}</p>}\r\n\r\n\r\n\r\n          \r\n            </div>\r\n              </div>\r\n            </div>\r\n          </React.Fragment>\r\n        ))}\r\n      </div>\r\n    </div>);\r\n\r\nexport default SeasonRecord;\r\n","import _ from 'lodash';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport Layout from \"../components/layout\";\r\nimport Breadcrumb from '../components/breadcrumb';\r\nimport SeasonRecord from '../components/SeasonRecord';\r\nimport { seasonOutcome, gamesByOwnerFunc, scoresOwners } from '../helpers/game';\r\n\r\nconst SeasonRecords = (query) => {\r\n\t\t// Get GraphlQL data\r\n\t\tconst games = query.data.allGamesJson.nodes;\r\n\t\tconst owners = query.data.allOwnersJson.nodes;\r\n\r\n\t\tconst [items, setItems] = useState(10);\r\n\t\tconst [topWins, setTopWins] = useState([]);\r\n\t\tconst [topLoses, setTopLoses] = useState([]);\r\n\t\tconst [topScores, setTopScores] = useState([]);\r\n\t\tconst [bottomScores, setBottomScores] = useState([]);\r\n\t\tconst [topScoresAgaisnt, setTopScoresAgaisnt] = useState([]);\r\n\t\tconst [bottomScoresAgaisnt, setBottomScoresAgaisnt] = useState([]);\r\n\t\tconst [topPCT, setTopPCT] = useState([]);\r\n\t\tconst [bottomPCT, setBottomPCT] = useState([]);\r\n\t\tconst [topAVGPoints, setTopAVGPoints] = useState([]);\r\n\t\tconst [bottomAVGPoints, setBottomAVGPoints] = useState([]);\r\n\t\tconst [maxScoreWeekSeason, setMaxScoreWeekSeason] = useState([]);\r\n\t\tconst [minScoreWeekSeason, setMinScoreWeekSeason] = useState([]);\r\n\t\tconst [topMeanScoresWeekSeason, setTopMeanScoresWeekSeason] = useState([]);\r\n\t\tconst [bottomMeanScoresWeekSeason, setBottomMeanScoresWeekSeason] = useState([]);\r\n\r\n\t\tconst seasonStats = [];\r\n\t\tconst test = [];\r\n\r\n\t\tuseEffect(() => {\r\n\t\t\t\r\n\t\t\t// Filtramos los juegos para tener todos los juegos por owner\r\n\t\t\tconst gamesByOwners = gamesByOwnerFunc(games);\r\n\t\t\t\r\n\t\t\t//Get array with just scores for each Owner\r\n\t\t\tconst scoresByOwner= scoresOwners(games);\r\n\r\n\t\t\t//Order by year and week so I can get the top week score etc\r\n\t\t\tconst scoresYearsWeeks = _.groupBy(scoresByOwner, (game) => {\r\n\t\t\t\treturn [game['year'], game['week']];\r\n\t\t\t});\r\n\r\n\t\t\t// Get the max and min points in the week running the object.\r\n\t\t\tconst seasonWeekStats = [];\r\n\t\t\tObject.keys(scoresYearsWeeks).forEach(key => {\r\n\t\t\t\tconst maxScoresWeek = _.maxBy(scoresYearsWeeks[key], function(o) {\r\n\t\t\t\t\treturn o.score;\r\n\t\t\t\t});\r\n\t\t\t\tconst minScoresWeek = _.minBy(scoresYearsWeeks[key], function(o) {\r\n\t\t\t\t\treturn o.score;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconst topMeanScoresWeek = _.takeRight(_.sortBy(scoresYearsWeeks[key], ['score']), scoresYearsWeeks[key].length/2); \r\n\t\t\t\tconst bottomMeanScoresWeek = _.take(_.sortBy(scoresYearsWeeks[key], ['score']), scoresYearsWeeks[key].length/2); \r\n\r\n\t\t\t\tseasonWeekStats.push({\r\n\t\t\t\t\ttopMeanScoresWeek,\r\n\t\t\t\t\tbottomMeanScoresWeek,\r\n\t\t\t\t\tmaxScoresWeek: maxScoresWeek.id,\r\n\t\t\t\t\tminScoresWeek: minScoresWeek.id,\r\n\t\t\t\t\tyear: maxScoresWeek.year\r\n\t\t\t\t})\r\n\t\t\t});\r\n\r\n\t\t\t// Group by Year so I can get the number of times each person got each stat\r\n\t\t\tconst seasonWeekYearStats = _.groupBy(seasonWeekStats, (week) => {\r\n\t\t\t\treturn [week['year']];\r\n\t\t\t});\r\n\r\n\t\t\t//console.log(seasonWeekYearStats,\"seasonWeekYearStats\")\r\n\r\n\t\t\tObject.keys(seasonWeekYearStats).forEach(year => {\r\n\t\t\t\tconst countTopMeanScore = {};\r\n\t\t\t\tconst countBottomMeanScore = {};\r\n\t\t\t\tconst countMaxScore = {};\r\n\t\t\t\tconst countMinScore = {};\r\n\t\t\t\t// Run the object and use a map to sum how many times each owner has got the stat\r\n\t\t\t\tseasonWeekYearStats[year].forEach(element => {\r\n\t\t\t\t\t\r\n\t\t\t\t\telement.topMeanScoresWeek.forEach(meanScore => {\r\n\t\t\t\t\t\tcountTopMeanScore[meanScore.id] = (countTopMeanScore[meanScore.id] || 0) + 1;\r\n\t\t\t\t\t});\r\n\t\t\t\t\telement.bottomMeanScoresWeek.forEach(meanScore => {\r\n\t\t\t\t\t\tcountBottomMeanScore[meanScore.id] = (countBottomMeanScore[meanScore.id] || 0) + 1;\r\n\t\t\t\t\t});\r\n\t\t\t\t\tcountTopMeanScore[element.maxScoresWeek] = (countMaxScore[element.maxScoresWeek] || 0) + 1;\r\n\t\t\t\t\tcountMaxScore[element.maxScoresWeek] = (countMaxScore[element.maxScoresWeek] || 0) + 1;\r\n\t\t\t\t\tcountMinScore[element.minScoresWeek] = (countMinScore[element.minScoresWeek] || 0) + 1;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconst maxEntries = Object.entries(countMaxScore);\r\n\t\t\t\tmaxEntries.forEach( ([ownerID, val] ) => {\r\n\t\t\t\t\tmaxScoreWeekSeason.push({\r\n\t\t\t\t\t\tscoreOwner: ownerID,\r\n\t\t\t\t\t\tscoreTimes: val,\r\n\t\t\t\t\t\tname :_.find(owners, ['id', ownerID ]).name,\r\n\t\t\t\t\t\timage : _.find(owners, ['id', ownerID]).image,\r\n\t\t\t\t\t\tyear\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconst minEntries = Object.entries(countMinScore);\r\n\t\t\t\tminEntries.forEach( ([ownerID, val] ) => {\r\n\t\t\t\t\tminScoreWeekSeason.push({\r\n\t\t\t\t\t\tscoreOwner: ownerID,\r\n\t\t\t\t\t\tscoreTimes: val,\r\n\t\t\t\t\t\tname :_.find(owners, ['id', ownerID ]).name,\r\n\t\t\t\t\t\timage : _.find(owners, ['id', ownerID]).image,\r\n\t\t\t\t\t\tyear\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconst topMeanEntries = Object.entries(countTopMeanScore);\r\n\t\t\t\ttopMeanEntries.forEach( ([ownerID, val] ) => {\r\n\t\t\t\t\ttopMeanScoresWeekSeason.push({\r\n\t\t\t\t\t\tscoreOwner: ownerID,\r\n\t\t\t\t\t\tscoreTimes: val,\r\n\t\t\t\t\t\tname :_.find(owners, ['id', ownerID ]).name,\r\n\t\t\t\t\t\timage : _.find(owners, ['id', ownerID]).image,\r\n\t\t\t\t\t\tyear\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconst bottomMeanEntries = Object.entries(countBottomMeanScore);\r\n\t\t\t\tbottomMeanEntries.forEach( ([ownerID, val] ) => {\r\n\t\t\t\t\tbottomMeanScoresWeekSeason.push({\r\n\t\t\t\t\t\tscoreOwner: ownerID,\r\n\t\t\t\t\t\tscoreTimes: val,\r\n\t\t\t\t\t\tname :_.find(owners, ['id', ownerID ]).name,\r\n\t\t\t\t\t\timage : _.find(owners, ['id', ownerID]).image,\r\n\t\t\t\t\t\tyear\r\n\t\t\t\t\t})\r\n\t\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\r\n\t\t\tgamesByOwners.forEach((owner) => {\r\n\t\t\t\t\r\n\t\t\t\t//Agrupamos los juegos por owners de cada owner por year para tener cada season\r\n\t\t\t\tconst gamesOwnersYears = _.groupBy(owner.games, (game) => {\r\n\t\t\t\t\treturn [game['year']];\r\n\t\t\t\t});\r\n\r\n\t\t\t\t//console.log(gamesOwnersYears,\"gamesOwnersYears\")\r\n\r\n\t\t\t\t//Recorremos el objecto de cada season y lo pasamos por el season outcome para obtener todos los stats de ese season\r\n\t\t\t\tObject.keys(gamesOwnersYears).forEach(key => {\r\n\t\t\t\t\tlet season = seasonOutcome(gamesOwnersYears[key],owner.id,key,false);\r\n\r\n\t\t\t\t\t//console.log(gamesOwnersYears[key],\"gamesOwnersYears[key]\")\r\n\t\t\t\t\t\r\n\t\t\t\t\tseason.name = _.find(owners, ['id', owner.id ]).name;\r\n\t\t\t\t\tseason.image = _.find(owners, ['id', owner.id]).image;\r\n\t\t\t\t\t\r\n\t\t\t\t\tseasonStats.push(season);\r\n\t\t\t\t});\r\n\r\n\t\r\n\t\t\t});\r\n\r\n\t\t\tconsole.log(seasonStats,\"seasonstats  \")\r\n\t\t\tsetTopWins(() => _.orderBy(_.takeRight(_.sortBy(seasonStats, ['wins']), items), ['wins'], ['desc']));\r\n\t\t\tsetTopLoses(() => _.orderBy(_.takeRight(_.sortBy(seasonStats, ['loses']), items), ['loses'], ['desc']));\r\n\r\n\t\t\tsetTopPCT(() => _.orderBy(_.takeRight(_.sortBy(seasonStats, ['pct']), items), ['pct'], ['desc']));\r\n\t\t\tsetBottomPCT(() => _.take(_.sortBy(seasonStats, ['pct']), items)); \r\n\r\n\t\t\tsetTopScores(() => _.orderBy(_.takeRight(_.sortBy(seasonStats, ['scoreFor']), items), ['scoreFor'], ['desc']));\r\n\t\t\tsetBottomScores(() => _.take(_.sortBy(seasonStats, ['scoreFor']), items)); \r\n\r\n\t\t\tsetTopScoresAgaisnt(() => _.orderBy(_.takeRight(_.sortBy(seasonStats, ['scoreAgaisnt']), items), ['scoreAgaisnt'], ['desc']));\r\n\t\t\tsetBottomScoresAgaisnt(() => _.take(_.sortBy(seasonStats, ['scoreAgaisnt']), items)); \r\n\r\n\t\t\tsetTopAVGPoints(() => _.orderBy(_.takeRight(_.sortBy(seasonStats, ['avgPoints']), items), ['avgPoints'], ['desc']));\r\n\t\t\tsetBottomAVGPoints(() => _.take(_.sortBy(seasonStats, ['avgPoints']), items)); \r\n\r\n\t\t\tsetMaxScoreWeekSeason(() => _.orderBy(_.takeRight(_.sortBy(maxScoreWeekSeason, ['scoreTimes']), items), ['scoreTimes'], ['desc']));\r\n\t\t\tsetMinScoreWeekSeason(() => _.orderBy(_.takeRight(_.sortBy(minScoreWeekSeason, ['scoreTimes']), items), ['scoreTimes'], ['desc']));\r\n\r\n\t\t\tsetTopMeanScoresWeekSeason(() => _.orderBy(_.takeRight(_.sortBy(topMeanScoresWeekSeason, ['scoreTimes']), items), ['scoreTimes'], ['desc']));\r\n\t\t\tsetBottomMeanScoresWeekSeason(() => _.orderBy(_.takeRight(_.sortBy(bottomMeanScoresWeekSeason, ['scoreTimes']), items), ['scoreTimes'], ['desc']));\r\n\t\r\n\t\t}, [items]);\r\n\t\r\n\t\treturn (\r\n\t\t\t\t<Layout >\r\n\t\t\t\t\t<main className=\"container-fluid\">\r\n\t\t\t\t\t\t<Breadcrumb title=\"Season Records\"/>\r\n\t\t\t\t\t\t<div className=\"card mb-3\">\r\n\t\t\t\t\t\t\t\t<div className=\"card-header\"> \r\n\t\t\t\t\t\t\t\t\t<label>Number of Records to show</label>\r\n\t\t\t\t\t\t\t\t\t<select className=\"form-control\" id=\"itemSelector\" onChange={(e) => {setItems( e.target.value)}}>\r\n\t\t\t\t\t\t\t\t\t\t<option value=\"10\">10</option>\r\n\t\t\t\t\t\t\t\t\t\t<option value=\"15\">15</option>\r\n\t\t\t\t\t\t\t\t\t\t<option value=\"20\">20</option>\r\n\t\t\t\t\t\t\t\t\t\t<option value=\"25\">25</option>\t\t\t\r\n\t\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"card-body\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t\t\t\t<SeasonRecord data={topWins} label=\"Wins\" title=\"Most Wins\"  />\r\n\t\t\t\t\t\t\t\t\t\t<SeasonRecord data={topLoses} label=\"Loses\" title=\"Most Loses\"  />\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t\t\t\t<SeasonRecord data={topPCT} label=\"Percentage\" title=\"Best Percentage\"  />\r\n\t\t\t\t\t\t\t\t\t\t<SeasonRecord data={bottomPCT} label=\"Percentage\" title=\"Worst Percentage\"  />\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"row my-4\">\r\n\t\t\t\t\t\t\t\t\t\t<SeasonRecord data={topScores} label=\"Points\" title=\"Most Points\"  />\r\n\t\t\t\t\t\t\t\t\t\t<SeasonRecord data={bottomScores} label=\"Points\" title=\"Less Points\"  />\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"row my-4\">\r\n\t\t\t\t\t\t\t\t\t\t<SeasonRecord data={topScoresAgaisnt} label=\"Points\" title=\"Most Points Agaisnt\"  />\r\n\t\t\t\t\t\t\t\t\t\t<SeasonRecord data={bottomScoresAgaisnt} label=\"Points\" title=\"Less Points Agaisnt\"  />\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"row my-4\">\r\n\t\t\t\t\t\t\t\t\t\t<SeasonRecord data={topAVGPoints} label=\"Points\" title=\"Most Points Avg/Game\"  />\r\n\t\t\t\t\t\t\t\t\t\t<SeasonRecord data={bottomAVGPoints} label=\"Points\" title=\"Less Points Avg/Game\"  />\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"row my-4\">\r\n\t\t\t\t\t\t\t\t\t\t<SeasonRecord data={maxScoreWeekSeason} label=\"Times\" title=\"Most times highest score in the week\"  />\r\n\t\t\t\t\t\t\t\t\t\t<SeasonRecord data={minScoreWeekSeason} label=\"Times\" title=\"Most times lowest score in the week\"  />\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"row my-4\">\r\n\t\t\t\t\t\t\t\t\t\t<SeasonRecord data={topMeanScoresWeekSeason} label=\"Times\" title=\"Most times above average score in the week\"  />\r\n\t\t\t\t\t\t\t\t\t\t<SeasonRecord data={bottomMeanScoresWeekSeason} label=\"Times\" title=\"Most times below average score in the week\"  />\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"card-footer small text-muted\"></div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</main>\r\n\t\t\t\t</Layout>\r\n\t\t);\r\n\r\n}\r\nexport default SeasonRecords;\r\n\r\nexport const pageQuery = graphql`\r\n{\r\n  allGamesJson {\r\n    nodes {\r\n      id\r\n      year\r\n      winner\r\n      week\r\n      playoffTierType\r\n      team_a {\r\n        logo\r\n        name\r\n        owner\r\n        ownerId\r\n        rank\r\n        score\r\n      }\r\n      team_b {\r\n        logo\r\n        name\r\n        owner\r\n        ownerId\r\n        rank\r\n        score\r\n      } \r\n    }\r\n  }\r\n  allOwnersJson {\r\n    nodes {\r\n      fantasyname\r\n      id\r\n      image\r\n      name\r\n      status\r\n    }\r\n  }\r\n}\r\n`;\r\n","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    baseIteratee = require('./_baseIteratee');\n\n/**\n * This method is like `_.max` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * _.maxBy(objects, function(o) { return o.n; });\n * // => { 'n': 2 }\n *\n * // The `_.property` iteratee shorthand.\n * _.maxBy(objects, 'n');\n * // => { 'n': 2 }\n */\nfunction maxBy(array, iteratee) {\n  return (array && array.length)\n    ? baseExtremum(array, baseIteratee(iteratee, 2), baseGt)\n    : undefined;\n}\n\nmodule.exports = maxBy;\n","var baseEach = require('./_baseEach');\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseAggregator;\n","var arrayAggregator = require('./_arrayAggregator'),\n    baseAggregator = require('./_baseAggregator'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nmodule.exports = createAggregator;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nmodule.exports = baseGt;\n","var baseAssignValue = require('./_baseAssignValue'),\n    createAggregator = require('./_createAggregator');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The order of grouped values\n * is determined by the order they occur in `collection`. The corresponding\n * value of each key is an array of elements responsible for generating the\n * key. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n *\n * // The `_.property` iteratee shorthand.\n * _.groupBy(['one', 'two', 'three'], 'length');\n * // => { '3': ['one', 'two'], '5': ['three'] }\n */\nvar groupBy = createAggregator(function(result, value, key) {\n  if (hasOwnProperty.call(result, key)) {\n    result[key].push(value);\n  } else {\n    baseAssignValue(result, key, [value]);\n  }\n});\n\nmodule.exports = groupBy;\n","var isSymbol = require('./isSymbol');\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseExtremum;\n","var baseExtremum = require('./_baseExtremum'),\n    baseIteratee = require('./_baseIteratee'),\n    baseLt = require('./_baseLt');\n\n/**\n * This method is like `_.min` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * _.minBy(objects, function(o) { return o.n; });\n * // => { 'n': 1 }\n *\n * // The `_.property` iteratee shorthand.\n * _.minBy(objects, 'n');\n * // => { 'n': 1 }\n */\nfunction minBy(array, iteratee) {\n  return (array && array.length)\n    ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt)\n    : undefined;\n}\n\nmodule.exports = minBy;\n","var defineProperty = require('./_defineProperty');\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nmodule.exports = baseLt;\n","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayAggregator;\n"],"sourceRoot":""}