{"version":3,"sources":["webpack:///(webpack)/buildin/module.js","webpack:///./src/components/headtohead/index.js","webpack:///./src/components/gamelogs/index.js","webpack:///./src/pages/headtohead.js"],"names":["module","exports","webpackPolyfill","deprecate","paths","children","Object","defineProperty","enumerable","get","l","i","library","add","faCaretDown","Headtohead","addDefaultSrcTeamA","document","getElementById","style","backgroundImage","addDefaultSrcTeamB","render","bgStyleA","this","props","teama","image","bgStyleB","teamb","className","src","display","onError","alt","id","name","onChange","triggerhappy","value","owners","map","owner","index","status","key","fantasyname","icon","record","games","currentstreak","highestwinstreak","totalPoints","toFixed","highestScore","lowestScore","highestMargin","lowestMargin","React","Component","Gamelogs","width","cellSpacing","data","game","teamA","team_a","scoreA","score","teamB","team_b","scoreB","year","week","IndexPage","teamChangeHandler","event","state","curTeam","target","_","find","setState","matchTeams","console","log","gamesLength","teamAlocal","teamBlocal","localplayedGames","winsA","winsB","allGames","forEach","indi","ownerId","push","playedGames","parseFloat","parseInt","length","ii","split","date","sort","a","b","Date","stat","team","winStreak","lossStreak","highMarginA","highMarginB","lowMarginA","lowMarginB","stats","highestStreak","lowestStreak","currentStreak","teamAstreak","slice","reverse","highestlosestreak","teamBstreak","initialTeam","totalpoints","netpoints","hightestscore","lowestscore","biggestwinmargin","smallestwinmargin","allDataJson","edges","node","componentDidMount","years","weeks_games","title","pageQuery"],"mappings":"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","file":"component---src-pages-headtohead-js-182352686446a3dd05fa.js","sourcesContent":["module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import React from 'react';\nimport './_headtohead.scss';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faCaretDown)\n\nclass Headtohead extends React.Component {\n  \n  addDefaultSrcTeamA() {\n    document.getElementById(\"image-team-a\").style.backgroundImage = \"url('https://fantasy-franchise.com/img/DEF.png')\";\n  }\n  addDefaultSrcTeamB() {\n    document.getElementById(\"image-team-b\").style.backgroundImage = \"url('https://fantasy-franchise.com/img/DEF.png')\";\n  }\n\n  render() {\n    var bgStyleA = {\n      backgroundImage: `url(${this.props.teama.image})`\n    };\n    var bgStyleB = {\n      backgroundImage: `url(${this.props.teamb.image})`\n    };\n\n    \n    return ( \n      <div>\n            <div className=\"row\">\n              <div className=\"col-6\">\n                <div className=\"team team-a\">\n                  <div className=\"totals\">\n                  <img src={this.props.teama.image} style={{ display: \"none\" }} onError={this.addDefaultSrcTeamA} alt=\"team-logo\" />\n                  <div id=\"image-team-a\" className=\"image\" style={ bgStyleA }></div>\n                <select className=\"form-control team-selector teama\" name=\"teama\" onChange={this.props.triggerhappy}>\n                      <option value>Select Red Team</option>\n                      {this.props.owners.map((owner, index) => {\n                        if (owner.status === 'active') {\n                          return <option key={owner.id} value={owner.id}>{owner.fantasyname} ({owner.name})</option>\n                        }\n                        else {\n                          return <option key={owner.id} value={owner.id}>Inactive - {owner.fantasyname} ({owner.name})</option>\n                        }\n                      })}\n                      \n                    </select><FontAwesomeIcon icon=\"caret-down\"/>\n                    <h2 className=\"record\">{this.props.teama.record}</h2>\n                  </div>\n                \n                </div>\n              </div>\n              <div className=\"col-6\">\n                <div className=\"team team-b\">\n                  <div className=\"totals\">\n                  <img src={this.props.teamb.image} style={{ display: \"none\" }} onError={this.addDefaultSrcTeamB} alt=\"team-logo\" />  \n                  <div id=\"image-team-b\" className=\"image\" style={ bgStyleB }></div>\n                <select className=\"form-control team-selector teamb\" name=\"teamb\" onChange={this.props.triggerhappy} >\n                      <option value>Select Blue Team</option>\n                      {this.props.owners.map((owner, index) => {\n                        if (owner.status === 'active') {\n                          return <option key={owner.id} value={owner.id}>{owner.fantasyname} ({owner.name})</option>\n                        }\n                        else {\n                          return <option key={owner.id} value={owner.id}>Inactive - {owner.fantasyname} ({owner.name})</option>\n                        }\n                      })}\n                    </select><FontAwesomeIcon icon=\"caret-down\"/>\n                    <h2 className=\"record\">{this.props.teamb.record}</h2>\n                </div>\n                \n                </div>\n              </div>\n            </div>\n                        \n            <div className=\"container-fluid mb-4\">\n              <div className=\"row\">\n              <div className=\"col\">\n                <div className={\"row team-stats \" + (this.props.games ? 'visible' : 'hidden')}>\n                  <div className=\"col-6\"><div>\n                  <div className=\"nums\">\n                    <p><strong>current streak:</strong> {this.props.teama.currentstreak}</p>\n                    <p><strong>highest win streak:</strong> {this.props.teama.highestwinstreak}</p>\n                    <p><strong>Total Points:</strong> {this.props.teama.totalPoints}</p>\n                    <p><strong>Average Points:</strong> {(this.props.teama.totalPoints / (this.props.teamb.record + this.props.teama.record)).toFixed(2)}</p>\n                    <p><strong>Highest Score:</strong> {this.props.teama.highestScore}</p>\n                    <p><strong>Lowest Score:</strong> {this.props.teama.lowestScore}</p>\n                    <p><strong>Biggest Win Margin:</strong>{this.props.teama.highestMargin}</p>\n                    <p><strong>Smallest Win Margin:</strong> {this.props.teama.lowestMargin}</p>\n                  </div>\n                </div>\n                </div>\n                  <div className=\"col-6\">\n                  <div>\n                  <div className=\"nums tmb\">\n                    <p> {this.props.teamb.currentstreak}</p>\n                    <p>{this.props.teamb.highestwinstreak}</p>\n                    <p> {this.props.teamb.totalPoints}</p>\n                    <p> {(this.props.teamb.totalPoints / (this.props.teamb.record + this.props.teama.record)).toFixed(2) }</p>\n                    <p> {this.props.teamb.highestScore}</p>\n                    <p> {this.props.teamb.lowestScore}</p>\n                    <p>{this.props.teamb.highestMargin}</p>\n                    <p> {this.props.teamb.lowestMargin}</p>\n                  </div>\n                </div>\n                  \n                  </div>\n                </div>\n              </div>\n            </div>\n            </div>  \n          </div>)\n  }\n};\n\nexport default Headtohead;\n","import React from 'react';\nimport './_gamelogs.scss';\n\nconst Gamelogs = (props) =>\n  ( <div className=\"card mb-3\">\n\t\t\t          <div className=\"card-header\">\n\t\t\t            <i className=\"fas fa-table\" />\n\t\t\t            Gamelogs</div>\n\t\t\t          <div className=\"card-body\">\n\t\t\t            <div className=\"table-responsive\">\n\t\t\t              <table className=\"table table-bordered\" id=\"dataTable\" width=\"100%\" cellSpacing={0}>\n\t\t\t                <thead>\n\t\t\t                  <tr>\n\t\t\t                  <th>Date</th>\n\t\t\t                    <th>Game</th>\n\t\t\t                  </tr>\n\t\t\t                </thead>\n\t\t\t                <tbody>\n\t\t\t                {props.data && (\n\t\t\t                \tprops.data.map((game, index) => {\n\t\t\t\t\t\t\t\t\tconst teamA = game.team_a[0];\n\t\t\t\t\t\t\t\t\tconst scoreA = (teamA.score && (teamA.score.toFixed && teamA.score.toFixed(2))) || 0;\n\t\t\t\t\t\t\t\t\tconst teamB = game.team_b[0];\n\t\t\t\t\t\t\t\t\tconst scoreB = (teamB.score && (teamB.score.toFixed && teamB.score.toFixed(2))) || 0;\n\t\t\t\t\t\t\t\t\treturn <tr key={game.team_b[0].score + scoreA} >\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{game.year}, {game.week}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{teamA.name} <strong>{scoreA}</strong>, {teamB.name} <strong>{scoreB}</strong></td>\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t})\n\t\t\t                \t\n\t\t\t                \t)}\n\t\t\t                </tbody>\n\t\t\t              </table>\n\t\t\t            </div>\n\t\t\t          </div>\n\t\t\t          \n\t\t\t        </div>);\n\nexport default Gamelogs;\n","import _ from 'lodash';\nimport React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from \"../components/layout\";\nimport Breadcrumb from '../components/breadcrumb';\nimport Headtohead from '../components/headtohead';\nimport Gamelogs from '../components/gamelogs';\n\nclass IndexPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.allGames = [];\n        this.initialTeam = {\n            record: '-',\n            name: '',\n            ownerId: '',\n            image: 'https://fantasy-franchise.com/img/DEF.png',\n            currentstreak: '',\n            highestwinstreak: '',\n            highestlosestreak: '',\n            totalpoints: '',\n            netpoints: '',\n            hightestscore: '',\n            lowestscore: '',\n            biggestwinmargin: '',\n            smallestwinmargin: ''\n        };\n        this.state = {\n            owners: [...props.data.allDataJson.edges[0].node.owners],\n            teamA: { ...this.initialTeam },\n            teamB: { ...this.initialTeam },\n            gamesLength: false\n\t\t}\n\t\tthis.playedGames = [];\n    }\n\n    teamChangeHandler = event => {\n        var owners = [...this.state.owners];\n        var curTeam = {};\n\n        // update actual state with modified object\n        if (event.target.name === 'teama') {\n            curTeam = _.find(owners, ['id', event.target.value]);\n            curTeam.record = '-';\n            this.setState({ teamA: curTeam }, () => this.matchTeams());\n        } else {\n            curTeam = _.find(owners, ['id', event.target.value]);\n            curTeam.record = '-';\n            this.setState({ teamB: curTeam }, () => this.matchTeams());\n        }\n    };\n\n    matchTeams = () => {\n        console.log('Matching teams', this.state);\n        if (this.state.teamA.id && this.state.teamB.id) {\n            console.log('matched');\n            this.setState({ gamesLength: true });\n            const teamAlocal = { ...this.state.teamA };\n            const teamBlocal = { ...this.state.teamB };\n            const localplayedGames = [];\n            const winsA = [];\n            const winsB = [];\n\n            // get matching games\n            this.state.allGames.forEach((game, indi) => {\n                if (\n                    (game.team_a[0].ownerId === teamAlocal.id ||\n                        game.team_a[0].ownerId === teamBlocal.id) &&\n                    (game.team_b[0].ownerId === teamAlocal.id ||\n                        game.team_b[0].ownerId === teamBlocal.id)\n                ) {\n                    localplayedGames.push(game);\n                }\n            });\n            this.setState({ playedGames: localplayedGames }, () =>\n                console.log('played games', this.state.playedGames)\n            );\n\n            // get winners\n            localplayedGames.forEach((game, indi) => {\n                if (\n                    (game.team_a[0].ownerId === teamAlocal.id &&\n                        parseFloat(game.team_a[0].score) >\n                            parseFloat(game.team_b[0].score)) ||\n                    (game.team_b[0].ownerId === teamAlocal.id &&\n                        parseFloat(game.team_b[0].score) >\n                            parseFloat(game.team_a[0].score))\n                ) {\n                    winsA.push(game);\n                } else if (\n                    (game.team_a[0].ownerId === teamBlocal.id &&\n                        parseFloat(game.team_a[0].score) >\n                            parseFloat(game.team_b[0].score)) ||\n                    (game.team_b[0].ownerId === teamBlocal.id &&\n                        parseFloat(game.team_b[0].score) >\n                            parseFloat(game.team_a[0].score))\n                ) {\n                    winsB.push(game);\n                }\n            });\n\n            // map new values\n            teamAlocal.record = parseInt(winsA.length);\n            teamBlocal.record = parseInt(winsB.length);\n\n            for (var ii = 0; ii < localplayedGames.length; ii++) {\n                const week = localplayedGames[ii].week.split(' ');\n\n                localplayedGames[ii].date =\n                    '01/' + week[1] + '/' + parseInt(localplayedGames[ii].year);\n            }\n\n            localplayedGames.sort(function(a, b) {\n                a = new Date(a.date);\n                b = new Date(b.date);\n                return a > b ? -1 : a < b ? 1 : 0;\n            });\n\n            //stat\n            const stat = (games, team) => {\n\n                var i,\n                    winStreak = 0,\n                    lossStreak = 0,\n                    highMarginA = 0,\n                    highMarginB = 0,\n                    lowMarginA = 10000,\n                    lowMarginB = 10000,\n                    length = games.length,\n                    stats = {\n                        highestStreak: 0,\n                        lowestStreak: 0,\n                        currentStreak: 0,\n                        highestScore: 0,\n                        lowestScore: 10000,\n                        highestMargin: 0,\n                        lowestMargin: 10000,\n                        totalPoints: 0\n                    };\n\n                for (i = 0; i < length; i++) {\n                    // check the value of the current entry against the last\n                    if (\n                        (games[i].team_a[0].ownerId === team.id &&\n                            parseFloat(games[i].team_a[0].score) >\n                                parseFloat(games[i].team_b[0].score)) ||\n                        (games[i].team_b[0].ownerId === team.id &&\n                            parseFloat(games[i].team_b[0].score) >\n                                parseFloat(games[i].team_a[0].score))\n                    ) {\n                        //check = 1,\n                        lowMarginA =\n                            parseFloat(games[i].team_a[0].score) -\n                            parseFloat(games[i].team_b[0].score);\n                        lowMarginB =\n                            parseFloat(games[i].team_b[0].score) -\n                            parseFloat(games[i].team_a[0].score);\n                        winStreak++;\n                        lossStreak = 0;\n                    } else if (\n                        (games[i].team_a[0].ownerId === team.id &&\n                            parseFloat(games[i].team_a[0].score) <\n                                parseFloat(games[i].team_b[0].score)) ||\n                        (games[i].team_b[0].ownerId === team.id &&\n                            parseFloat(games[i].team_b[0].score) <\n                                parseFloat(games[i].team_a[0].score))\n                    ) {\n                        //check = ''\n                        lossStreak++;\n                        winStreak = 0;\n                    } else {\n                        lossStreak = 0;\n                        winStreak = 0;\n                    }\n\n                    stats.currentStreak = winStreak;\n                    // set the master stats var\n                    if (winStreak > stats.highestStreak) {\n                        stats.highestStreak = winStreak;\n                    }\n\n                    if (lossStreak > stats.lowestStreak) {\n                        stats.lowestStreak = lossStreak;\n                    }\n\n                    // Check Highest score\n                    if (\n                        parseFloat(games[i].team_a[0].score) >\n                            stats.highestScore &&\n                        games[i].team_a[0].ownerId === team.id\n                    ) {\n                        stats.highestScore = parseFloat(\n                            games[i].team_a[0].score\n                        );\n                    }\n\n                    if (\n                        parseFloat(games[i].team_b[0].score) >\n                            stats.highestScore &&\n                        games[i].team_b[0].ownerId === team.id\n                    ) {\n                        stats.highestScore = parseFloat(\n                            games[i].team_b[0].score\n                        );\n                    }\n\n                    // Check lowest score\n                    if (parseFloat(games[i].team_a[0].score) < stats.lowestScore &&\n                        games[i].team_a[0].ownerId === team.id\n                    ) {\n                        stats.lowestScore = parseFloat(\n                            games[i].team_a[0].score\n                        );\n                    }\n\n                    if (parseFloat(games[i].team_b[0].score) < stats.lowestScore &&\n                        games[i].team_b[0].ownerId === team.id\n                    ) {\n                        stats.lowestScore = parseFloat(\n                            games[i].team_b[0].score\n                        );\n                    }\n\n                    // Check Highest margin\n                    highMarginA =\n                        parseFloat(games[i].team_a[0].score) -\n                        parseFloat(games[i].team_b[0].score);\n                    highMarginB =\n                        parseFloat(games[i].team_b[0].score) -\n                        parseFloat(games[i].team_a[0].score);\n\n                    if (\n                        highMarginA > stats.highestMargin &&\n                        games[i].team_a[0].ownerId === team.id\n                    ) {\n                        stats.highestMargin = highMarginA;\n                    }\n\n                    if (\n                        highMarginB > stats.highestMargin &&\n                        games[i].team_b[0].ownerId === team.id\n                    ) {\n                        stats.highestMargin = highMarginB;\n                    }\n\n                    // Check Lowest margin\n                    if (\n                        lowMarginA < stats.lowestMargin &&\n                        games[i].team_a[0].ownerId === team.id &&\n                        lowMarginA > 0\n                    ) {\n                        stats.lowestMargin = lowMarginA;\n                    }\n\n                    if (\n                        lowMarginB < stats.lowestMargin &&\n                        games[i].team_b[0].ownerId === team.id &&\n                        lowMarginB > 0\n                    ) {\n                        stats.lowestMargin = lowMarginB;\n                    }\n\n                    if (games[i].team_a[0].ownerId === team.id) {\n                        stats.totalPoints += parseFloat(\n                            games[i].team_a[0].score\n                        );\n                    }\n                    if (games[i].team_b[0].ownerId === team.id) {\n                        stats.totalPoints += parseFloat(\n                            games[i].team_b[0].score\n                        );\n                    }\n                }\n\n                return stats;\n            };\n\n            const teamAstreak = stat(\n                localplayedGames.slice(0).reverse(),\n                teamAlocal\n            );\n           \n            teamAlocal.currentstreak = teamAstreak.currentStreak;\n            teamAlocal.highestwinstreak = teamAstreak.highestStreak;\n            teamAlocal.highestlosestreak = teamAstreak.lowestStreak;\n            teamAlocal.highestScore = teamAstreak.highestScore.toFixed(2);\n            if (teamAstreak.lowestScore === 10000) {\n                teamAlocal.lowestScore = 0;\n            } else {\n                teamAlocal.lowestScore = teamAstreak.lowestScore.toFixed(2);\n            }\n            teamAlocal.highestMargin = teamAstreak.highestMargin.toFixed(2);\n            if (teamAstreak.lowestMargin === 10000) {\n                teamAlocal.lowestMargin = 0;\n            } else {\n                teamAlocal.lowestMargin = teamAstreak.lowestMargin.toFixed(2);\n            }\n            teamAlocal.totalPoints = teamAstreak.totalPoints.toFixed(2);\n\n            const teamBstreak = stat(\n                localplayedGames.slice(0).reverse(),\n                teamBlocal\n            );\n\n            teamBlocal.currentstreak = teamBstreak.currentStreak;\n            teamBlocal.highestwinstreak = teamBstreak.highestStreak;\n            teamBlocal.highestlosestreak = teamBstreak.lowestStreak;\n            teamBlocal.highestScore = teamBstreak.highestScore.toFixed(2);\n            if (teamBstreak.lowestScore === 10000) {\n                teamBlocal.lowestScore = 0;\n            } else {\n                teamBlocal.lowestScore = teamBstreak.lowestScore.toFixed(2);\n            }\n            teamBlocal.highestMargin = teamBstreak.highestMargin.toFixed(2);\n            if (teamBstreak.lowestMargin === 10000) {\n                teamBlocal.lowestMargin = 0;\n            } else {\n                teamBlocal.lowestMargin = teamBstreak.lowestMargin.toFixed(2);\n            }\n            teamBlocal.totalPoints = teamBstreak.totalPoints.toFixed(2);\n\n            //total points\n\n            /*\n            const getTotalPoints = team => {\n                localplayedGames.map((game, indix) => {});\n            };\n            */\n\n            this.setState({ teamA: teamAlocal });\n            this.setState({ teamB: teamBlocal }, () =>\n                console.log('teamssss', teamAlocal, teamBlocal)\n            );\n        } else {\n            console.log('no match');\n            this.setState({ gamesLength: false });\n            this.setState({ playedGames: [] });\n        }\n    };\n\n    componentDidMount() {\n        const years = this.props.data.allDataJson.edges[0].node.years;\n        const owners = this.props.data.allDataJson.edges[0].node.owners;\n        var games = [];\n        years.forEach((year) => {\n            year.weeks_games.forEach((week) => {\n                games.push(...week.games);\n            });\n        });\n        this.setState({ owners: owners })\n        this.setState({ allGames: games });\n  \n    }\n\n    render() {\n        return (\n            <Layout >\n            <main className=\"container-fluid headtohead\">\n                <Breadcrumb title=\"Head to Head\" />\n\n                <div className=\"row\">\n                    <div className=\"col-lg-7\">\n                        <Headtohead\n                            owners={this.state.owners}\n                            triggerhappy={event =>\n                                this.teamChangeHandler(event)\n                            }\n                            teama={this.state.teamA}\n                            teamb={this.state.teamB}\n                            games={this.state.gamesLength}\n                        />\n                    </div>\n                    <div className=\"col-lg-5\">\n                        <Gamelogs data={this.state.playedGames} />\n                    </div>\n                </div>\n            </main>\n            </Layout>\n        );\n    }\n}\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n    query HeadtoheadQuery {\n        allDataJson {\n            edges {\n                node {\n                    owners {\n\t\t\t\t\t\tname\n\t\t\t\t\t\tfantasyname\n\t\t\t\t\t\tid\n\t\t\t\t\t\timage\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n                    years {\n                        weeks_games {\n                            games {\n                                week\n                                playoffTierType\n                                team_a {\n                                    name\n                                    owner\n                                    ownerId\n                                    logo\n                                    score\n                                    rank\n                                }\n                                team_b {\n                                    name\n                                    owner\n                                    ownerId\n                                    logo\n                                    score\n                                    rank\n                                }\n                                year\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n"],"sourceRoot":""}