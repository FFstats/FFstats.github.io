{"version":3,"sources":["webpack:///./src/pages/standings.js"],"names":["Standings","query","useState","yearLabels","setYearLabels","statsByTeam","setStatsByTeam","React","year","setYear","playoff","setPlayoff","regular","setRegular","games","data","allGamesJson","nodes","owners","allOwnersJson","uniqueYears","Set","map","item","reverse","useEffect","tempStatsByTeam","gamesByOwner","filteredGames","filter","game","playoffTierType","forEach","find","obj","id","team_a","ownerId","push","name","owner","team_b","team","wins","loses","ties","points","pointsAgaisnt","parseFloat","score","winner","winRate","length","fantasyname","toFixed","pointsAgainst","sort","a","b","Date","index","rank","className","title","type","value","onChange","e","target","checked","change","options","defaultSortName","defaultSortOrder","bordered","trClassName","version","dataField","isKey","dataSort","width"],"mappings":"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","file":"component---src-pages-standings-js-01c09372e764210fed94.js","sourcesContent":["import _ from 'lodash';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport Layout from \"../components/layout\";\r\nimport Breadcrumb from '../components/breadcrumb';\r\nimport '../components/standings/_standings.scss';\r\nimport YearSelect from '../components/year-selector';\r\nimport {BootstrapTable, TableHeaderColumn} from 'react-bootstrap-table';\r\n\r\nconst Standings = (query) => {\r\n  const options = {\r\n    defaultSortName: 'rank',\r\n    defaultSortOrder: 'asc'\r\n  };\r\n\r\n\tconst [yearLabels, setYearLabels] = useState([]);\r\n  const [statsByTeam, setStatsByTeam] = useState([]);\r\n  const [year, setYear] = React.useState(\"All\");\r\n  const [playoff, setPlayoff] = useState(false);\r\n  const [regular, setRegular] = useState(true);\r\n\r\n  // Get GraphlQL data\r\n  const games = query.data.allGamesJson.nodes;\r\n  const owners = query.data.allOwnersJson.nodes;\r\n\r\n  // Get unique years of all games using a Set Object\r\n  const uniqueYears = [...new Set(games.map(item => item.year))].reverse(); \r\n\r\n  const loadYearData = () => {\r\n    const tempStatsByTeam = [];\r\n    const gamesByOwner = [];\r\n    let filteredGames = games;\r\n\t\tlet teamObject = [];\r\n\r\n    if (!playoff) {\r\n      filteredGames = filteredGames.filter(function (game) {\r\n        return game.playoffTierType !== \"WINNERS_BRACKET\";\r\n      });            \r\n    }  \r\n    \r\n    if (!regular) {\r\n      filteredGames = filteredGames.filter(function (game) {\r\n        return game.playoffTierType !== \"NONE\";\r\n      });            \r\n    } \r\n    \r\n    if (year !== 'All') {\r\n      filteredGames = filteredGames.filter(function (game) {\r\n        return game.year === year;\r\n      });\r\n    }\r\n\r\n    //get games by owner\r\n    filteredGames.forEach((game) => {\r\n      if (gamesByOwner.find(obj => obj.id === game.team_a[0].ownerId)) {\r\n          teamObject = gamesByOwner.find(obj => obj.id === game.team_a[0].ownerId);\r\n          teamObject.games.push(game);\r\n      } else {\r\n        gamesByOwner.push({\r\n          id: game.team_a[0].ownerId,\r\n          name: game.team_a[0].owner,\r\n          games: [game]\r\n        })\r\n      }\r\n      if (gamesByOwner.find(obj => obj.id === game.team_b[0].ownerId)) {\r\n          teamObject = gamesByOwner.find(obj => obj.id === game.team_b[0].ownerId);\r\n          teamObject.games.push(game);\r\n      } else {\r\n        gamesByOwner.push({\r\n          id: game.team_b[0].ownerId,\r\n          name: game.team_b[0].owner,\r\n          games: [game]\r\n        })\r\n      }\r\n    })\r\n\r\n    // process stats per team \r\n    gamesByOwner.forEach((team) => {\r\n      let wins = 0,\r\n        loses = 0,\r\n        ties = 0,\r\n        points = 0,\r\n        pointsAgaisnt = 0;\r\n      \r\n      team.games.forEach((game) => {\r\n        if(year === \"All\") {\r\n          if(game.team_a[0].ownerId === team.id) {\r\n            points += parseFloat(game.team_a[0].score);\r\n            pointsAgaisnt += parseFloat(game.team_b[0].score);\r\n          } else if (game.team_b[0].ownerId === team.id) {\r\n            points += parseFloat(game.team_b[0].score);\r\n            pointsAgaisnt += parseFloat(game.team_a[0].score);\r\n          }\r\n\r\n          if (\r\n            (game.winner === 'HOME' && game.team_a['0'].ownerId === team.id) ||\r\n            (game.winner === 'AWAY' && game.team_b['0'].ownerId === team.id)\r\n          ) {\r\n            wins++\r\n          } else if (parseFloat(game.team_b[0].score) === parseFloat(game.team_a[0].score)) {\r\n            ties++\r\n          } else {\r\n            loses++\r\n          }\r\n        } else {\r\n          if (game.team_a[0].ownerId === team.id) {\r\n            points += parseFloat(game.team_a[0].score);\r\n            pointsAgaisnt += parseFloat(game.team_b[0].score);\r\n          } else if (game.team_b[0].ownerId === team.id) {\r\n            points += parseFloat(game.team_b[0].score);\r\n            pointsAgaisnt += parseFloat(game.team_a[0].score);\r\n          }\r\n          if (\r\n            (game.winner === 'HOME' && game.team_a['0'].ownerId === team.id) ||\r\n            (game.winner === 'AWAY' && game.team_b['0'].ownerId === team.id)\r\n          ) {\r\n            wins++\r\n          } else if (parseFloat(game.team_b[0].score) === parseFloat(game.team_a[0].score)) {\r\n            ties++\r\n          } else {\r\n            loses++\r\n          }\r\n        }\r\n      })\r\n      let winRate = parseFloat(wins + (ties * .5))/team.games.length;\r\n\r\n      // Get Owner name from Owners \r\n      const owner = _.find(owners, ['id', team.id]);\r\n\r\n      tempStatsByTeam.push({\r\n        team: owner.fantasyname !== '' ? owner.name + \" (\" + owner.fantasyname + \")\" : owner.name ,\r\n        wins: wins,\r\n        loses: loses,\r\n        ties: ties,\r\n        points: parseFloat(points.toFixed(2)),\r\n        pointsAgainst: parseFloat(pointsAgaisnt.toFixed(2)),\r\n        winRate: winRate.toFixed(3)\r\n      })\r\n    })\r\n\r\n    // Sort by wins\r\n    tempStatsByTeam.sort(function(a, b) {\r\n      a = new Date(a.wins);\r\n      b = new Date(b.wins);\r\n      return a>b ? -1 : a<b ? 1 : 0;\r\n    });\r\n\r\n    // Set rank based on wins\r\n    tempStatsByTeam.forEach((team, index) => {\r\n      team.rank = index + 1;\r\n    })\r\n\r\n    setStatsByTeam(() => tempStatsByTeam);\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadYearData();\r\n  }, [year,playoff,regular]);\r\n  \r\n\tuseEffect(() => {\r\n    setYearLabels(() => [...uniqueYears]);\r\n    \r\n\t}, []);\r\n\r\n\treturn (\r\n    <Layout >\r\n    <main className=\"container-fluid standings\">\r\n      <Breadcrumb title=\"Standings\"/>\r\n        <div className=\"card mb-3\">\r\n            <div className=\"card-header\"> \r\n            <input type=\"checkbox\" id=\"regular-season\" value=\"regular-season\" onChange={(e) => {setRegular(e.target.checked)}} checked={regular} /> <span className=\"checkbox-label\">Regular Season</span>\r\n\t\t\t\t\t\t<input type=\"checkbox\" id=\"playoffs\" value=\"playoffs\" onChange={(e) => {setPlayoff(e.target.checked)}} checked={playoff} /> <span className=\"checkbox-label\">Playoffs</span>\r\n   \r\n          <br/><br/>\r\n          \r\n          <YearSelect data={yearLabels} change={(e) => {setYear( e.target.value)}}/>\r\n              </div>\r\n            <div className=\"card-body\">\r\n              <div className=\"table-responsive\">\r\n                <BootstrapTable data={statsByTeam} options={ options } bordered={ false } trClassName=\"alt\" version='4'>\r\n                  <TableHeaderColumn dataField='rank' isKey={true} dataSort={true} className=\"heading--gray\" width=\"10%\">Rank</TableHeaderColumn>\r\n                  <TableHeaderColumn dataField='team' dataSort={ true } className=\"heading--gray\">Team</TableHeaderColumn>\r\n                  <TableHeaderColumn dataField='wins' dataSort={true}  className=\"heading--gray\" width=\"10%\">W</TableHeaderColumn>\r\n                  <TableHeaderColumn dataField='loses' dataSort={true} className=\"heading--gray\" width=\"10%\">L</TableHeaderColumn>\r\n                  <TableHeaderColumn dataField='ties' dataSort={true} className=\"heading--gray\" width=\"10%\">T</TableHeaderColumn>\r\n                  <TableHeaderColumn dataField='winRate' dataSort={true} className=\"heading--gray\" width=\"10%\">PCT</TableHeaderColumn>\r\n                  <TableHeaderColumn dataField='points' dataSort={true} className=\"heading--gray\" width=\"10%\">PF</TableHeaderColumn>\r\n                  <TableHeaderColumn dataField='pointsAgainst' dataSort={ true } className=\"heading--gray\" width=\"10%\">PA</TableHeaderColumn>\r\n                </BootstrapTable>\r\n              </div>\r\n            </div>\r\n            <div className=\"card-footer small text-muted\"></div>\r\n          </div>\r\n    </main>\r\n   </Layout>\r\n\t);\r\n};\r\n\r\nexport default Standings;\r\n\r\nexport const pageQuery = graphql`\r\n{\r\n  allGamesJson {\r\n    nodes {\r\n      id\r\n      year\r\n      winner\r\n      week\r\n      playoffTierType\r\n      team_a {\r\n        id\r\n        logo\r\n        name\r\n        owner\r\n        ownerId\r\n        rank\r\n        score\r\n      }\r\n      team_b {\r\n        id\r\n        logo\r\n        name\r\n        owner\r\n        ownerId\r\n        rank\r\n        score\r\n      } \r\n    }\r\n  }\r\n  allOwnersJson {\r\n    nodes {\r\n      fantasyname\r\n      id\r\n      image\r\n      name\r\n      status\r\n      testName\r\n      user\r\n    }\r\n  }\r\n}\r\n`;\r\n"],"sourceRoot":""}