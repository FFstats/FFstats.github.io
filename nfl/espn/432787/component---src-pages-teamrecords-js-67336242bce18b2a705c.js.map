{"version":3,"sources":["webpack:///./src/pages/teamrecords.js"],"names":["IndexPage","props","yearChangeHandler","event","selected","target","value","setState","YearSelected","loadYearData","owners","data","allDataJson","edges","node","year","state","includeRegularSeason","refs","regular_season","checked","includePlayoffs","playoffs","allYearsObject","gamesByYear","yearObject","find","obj","gameWeeks","allGamesYear","allScores","forEach","element","weeks","push","reverse","i","length","week","games","game","id","team_a","ownerId","name","owner","score","image","team_b","topScores","bottomScores","regularSeasonClickHandler","bind","yearLabels","UNSAFE_componentWillMount","years","this","weeks_games","playOffWeeks","currentYear","playoffTierType","isPlayoff","componentDidMount","render","className","title","type","ref","onChange","defaultChecked","change","label","React","Component"],"mappings":"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","file":"component---src-pages-teamrecords-js-67336242bce18b2a705c.js","sourcesContent":["import _ from 'lodash';\r\nimport React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport Layout from \"../components/layout\";\r\nimport Breadcrumb from '../components/breadcrumb';\r\nimport YearSelect from '../components/year-selector';\r\nimport GameRecord from '../components/GameRecord';\r\nimport MatchupRecord from '../components/MatchupRecord';\r\n//import { gameOutcome } from '../helpers/game';\r\n\r\nclass IndexPage extends React.Component {\r\n\tconstructor(props) {\r\n\t\t\t\t\t\tsuper(props);\r\n\t\t\t\t\t\tthis.yearChangeHandler = this.yearChangeHandler.bind(this);\r\n\t\t\t\t\t\tthis.loadYearData = this.loadYearData.bind(this);\r\n\t        \tthis.state = {\r\n\t\t\t\t\t\t\t\ttopScores: [],\r\n\t\t\t\t\t\t\t\tbottomScores: [],\r\n\t\t\t\t\t\t\t\tyearLabels: [],\r\n\t\t\t\t\t\t\t\tYearSelected: \"\",\r\n\t\t\t\t\t\t\t\tgamesByYear: []\r\n\r\n\t\t        }\r\n\t        }\r\n\t\t\t\t\t\r\n\t\tyearChangeHandler = (event) => {\r\n\t\t\tvar selected = event.target.value;\r\n\t\t\tthis.setState(\r\n\t\t\t\t{ YearSelected: selected },\r\n\t\t\t\t() => this.loadYearData()\r\n\t\t\t)\r\n\t\t}\r\n\t\r\n\t\tloadYearData = () => {\r\n\t\t\tconst owners = this.props.data.allDataJson.edges[0].node.owners;\r\n\t\t\tvar year = this.state.YearSelected;\r\n\t\t\tvar includeRegularSeason = this.refs.regular_season.checked;\r\n\t\t\tvar includePlayoffs = this.refs.playoffs.checked;\r\n\r\n\t\t\tvar allYearsObject = this.state.gamesByYear;\r\n\t\t\tvar yearObject = this.state.gamesByYear.find(obj => obj.year === year);\r\n\t\t\tvar gameWeeks = [];\r\n\t\t\tvar allGamesYear = [];\r\n\t\t\tvar allScores = [];\r\n\r\n\t\t\tif (year === 'All') {\r\n\t\t\t\tallYearsObject.forEach(function (element) {\r\n\t\t\t\t\tlet weeks = element.weeks;\r\n\t\t\t\t\t// Just regular season\r\n\t\t\t\t\tif (!includePlayoffs && includeRegularSeason) { \r\n\t\t\t\t\t\tweeks = _.filter(weeks, { 'isPlayoff': false });\r\n\t\t\t\t\t\tgameWeeks.push(weeks);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//Just playoffs \r\n\t\t\t\t\telse if (includePlayoffs && !includeRegularSeason) {\r\n\t\t\t\t\t\tweeks = _.filter(weeks, { 'isPlayoff': true });\r\n\t\t\t\t\t\tgameWeeks.push(weeks);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// All\r\n\t\t\t\t\telse if (includePlayoffs && includeRegularSeason) {\r\n\t\t\t\t\t\tgameWeeks.push(weeks);\r\n\t\t\t\t\t}\t\t\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet weeks = yearObject.weeks;\r\n\t\t\t\t// Just regular season\r\n\t\t\t\tif (!includePlayoffs && includeRegularSeason) {\r\n\t\t\t\t\tweeks = _.filter(weeks, { 'isPlayoff': false });\r\n\t\t\t\t\tgameWeeks = weeks;\r\n\t\t\t\t}\r\n\t\t\t\t//Just playoffs \r\n\t\t\t\telse if (includePlayoffs && !includeRegularSeason) {\r\n\t\t\t\t\tweeks = _.filter(weeks, { 'isPlayoff': true });\r\n\t\t\t\t\tgameWeeks = weeks;\r\n\t\t\t\t}\r\n\t\t\t\t// All\r\n\t\t\t\telse if (includePlayoffs && includeRegularSeason) {\r\n\t\t\t\t\tgameWeeks = weeks;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\r\n\t\t\tgameWeeks.reverse();\r\n\r\n\t\t\t//get all games from weeks for each year\r\n\t\t\tif (year === 'All') {\r\n\t\t\t\tfor (let i = 0; i < gameWeeks.length; i++) {\r\n\t\t\t\t\tgameWeeks[i].forEach((week) => {\r\n\t\t\t\t\t\tweek.games.forEach((game) => {\r\n\t\t\t\t\t\t\tallGamesYear.push(game);\r\n\t\t\t\t\t\t\tallScores.push({\r\n\t\t\t\t\t\t\t\tid: game.team_a[\"0\"].ownerId,\r\n\t\t\t\t\t\t\t\tname: game.team_a[\"0\"].owner,\r\n\t\t\t\t\t\t\t\tscore: game.team_a[\"0\"].score,\r\n\t\t\t\t\t\t\t\tweek: game.week,\r\n\t\t\t\t\t\t\t\tyear: game.year,\r\n\t\t\t\t\t\t\t\timage: _.find(owners, ['id', game.team_a[\"0\"].ownerId]).image\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tallScores.push({\r\n\t\t\t\t\t\t\t\tid: game.team_b[\"0\"].ownerId,\r\n\t\t\t\t\t\t\t\tname: game.team_b[\"0\"].owner,\r\n\t\t\t\t\t\t\t\tscore: game.team_b[\"0\"].score,\r\n\t\t\t\t\t\t\t\tweek: game.week,\r\n\t\t\t\t\t\t\t\tyear: game.year,\r\n\t\t\t\t\t\t\t\timage: _.find(owners, ['id', game.team_b[\"0\"].ownerId]).image\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Get games for just one year\r\n\t\t\telse {\r\n\t\t\t\tgameWeeks.forEach((week) => {\r\n\t\t\t\t\tweek.games.forEach((game) => {\r\n\t\t\t\t\t\tallGamesYear.push(game);\r\n\t\t\t\t\t\tallScores.push({\r\n\t\t\t\t\t\t\tid: game.team_a[\"0\"].ownerId,\r\n\t\t\t\t\t\t\tname: game.team_a[\"0\"].owner,\r\n\t\t\t\t\t\t\tscore: game.team_a[\"0\"].score,\r\n\t\t\t\t\t\t\tweek: game.week,\r\n\t\t\t\t\t\t\tyear: game.year,\r\n\t\t\t\t\t\t\timage: _.find(owners, ['id', game.team_a[\"0\"].ownerId]).image\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tallScores.push({\r\n\t\t\t\t\t\t\tid: game.team_b[\"0\"].ownerId,\r\n\t\t\t\t\t\t\tname: game.team_b[\"0\"].owner,\r\n\t\t\t\t\t\t\tscore: game.team_b[\"0\"].score,\r\n\t\t\t\t\t\t\tweek: game.week,\r\n\t\t\t\t\t\t\tyear: game.year,\r\n\t\t\t\t\t\t\timage: _.find(owners, ['id', game.team_b[\"0\"].ownerId]).image\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tallScores = _.sortBy(allScores, ['score']);\r\n\t\t\tvar topScores = _.orderBy(_.takeRight(allScores, 10), ['score'], ['desc']);\r\n\t\t\tvar bottomScores = _.take(allScores, 10);\r\n\r\n\t\t\tthis.setState({ topScores: topScores });\r\n\t\t\tthis.setState({ bottomScores: bottomScores });\r\n\t\t\t\r\n\t\t}\r\n\t\r\n\t\tUNSAFE_componentWillMount() {\r\n\t\t\tconst years = this.props.data.allDataJson.edges[0].node.years;\r\n\t\t\tvar games = [];\r\n\t\t\t\r\n\t\t\tyears.forEach((year) => {\r\n\t\t\t\tyear.weeks_games.forEach((week) => {\r\n\t\t\t\t\tgames.push(...week.games);\r\n\t\t\t\t})\r\n\t\t\t});\r\n\r\n\t\t\tvar playOffWeeks = [];\r\n\t\t\tvar gamesByYear = [];\r\n\t\t\tvar yearLabels = [];\r\n\t\t\t\r\n\t\t\t// get games by years and weeks\r\n\r\n\t\t\tgames.forEach((game) => {\r\n\t\t\t\t// If year repeats itself\r\n\t\t\t\tif(gamesByYear.find(obj => obj.year === game.year)) { \r\n\t\t\t\t\tvar currentYear = gamesByYear.find(obj => obj.year === game.year)\r\n\t\t\t\t\t\tif (currentYear.weeks.find(obj => obj.week === game.week)) {\r\n\t\t\t\t\t\t\tvar currentWeek = currentYear.weeks.find(obj => obj.week === game.week)\r\n\t\t\t\t\t\t\tcurrentWeek.games.push(game);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurrentYear.weeks.push({\r\n\t\t\t\t\t\t\t\tweek: game.week,\r\n\t\t\t\t\t\t\t\tgames: [game]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t} else { // Initial year \r\n\t\t\t\t\tgamesByYear.push({\r\n\t\t\t\t\t\t\tyear: game.year,\r\n\t\t\t\t\t\t\tweeks: [{\r\n\t\t\t\t\t\t\t\tweek: game.week,\r\n\t\t\t\t\t\t\t\tgames: [game]\r\n\t\t\t\t\t\t\t}]\r\n\t\t\t\t\t});\r\n\t\t\t\t\tyearLabels.push(game.year);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// mark the playoff weeks and populate array\r\n\t\t\tgamesByYear.forEach((year) => {\r\n\t\t\t\tyear.weeks.forEach((week) => {\r\n\t\t\t\t\tif (week.games[0].playoffTierType !== 'NONE') {\r\n\t\t\t\t\t\tweek.isPlayoff = true;\r\n\t\t\t\t\t\tplayOffWeeks.push(week)\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tweek.isPlayoff = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tyearLabels.reverse();\r\n\r\n\t\t\tthis.setState({yearLabels:yearLabels });\r\n\t\t\r\n\t\t\tthis.setState({gamesByYear:gamesByYear})\r\n\t\t\tthis.setState({YearSelected: 'All' })\r\n\t\t\t \r\n  \t}        \r\n  \t\r\n  componentDidMount() {\r\n\t\tthis.loadYearData();\r\n\t}\r\n\t\t\r\n\tregularSeasonClickHandler = event => {\r\n\t\tthis.loadYearData();\r\n\t}\r\n\t\t\r\n  \trender() {\r\n\t\r\n\t\t return (\r\n\t\t\t <Layout >\r\n\t\t\t\t<main className=\"container-fluid\">\r\n\t\t\t\t\t<Breadcrumb title=\"Game Records\"/>\r\n\t\t\t\t\t<div className=\"card mb-3\">\r\n\t\t\t\t\t\t\t<div className=\"card-header\"> \r\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"regular-season\" ref=\"regular_season\" value=\"regular-season\" onChange={this.regularSeasonClickHandler} defaultChecked={true} /> <span className=\"checkbox-label\">Regular Season</span>\r\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"playoffs\" ref=\"playoffs\" value=\"playoffs\" onChange={this.regularSeasonClickHandler} /> <span className=\"checkbox-label\">Playoffs</span>\r\n\t\t\t\t\t\t\t\t<br/><br/>\r\n\t\t\t\t\t\t\t\t<YearSelect data={this.state.yearLabels} change={(event) => this.yearChangeHandler(event)}/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"card-body\">\r\n\t\t\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t\t\t<GameRecord data={this.state.topScores} label=\"Score\" title=\"Top Ten Scores\"  />\r\n\t\t\t\t\t\t\t\t\t<GameRecord data={this.state.bottomScores} label=\"Score\" title=\"Bottom Ten Scores\" />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"row my-4\">\r\n\t\t\t\t\t\t\t\t\t<MatchupRecord data={this.state.topScores} label=\"Margin\" title=\"Top Ten Victory Margins\" />\r\n\t\t\t\t\t\t\t\t\t<MatchupRecord data={this.state.bottomScores} label=\"Margin\" title=\"Bottom Ten Victory Margins\" />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"card-footer small text-muted\"></div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t</main>\r\n\t\t\t </Layout>\r\n\t\t\t );\r\n\t}\r\n}\r\nexport default IndexPage;\r\n\r\nexport const pageQuery = graphql`\r\n  query teamRecordsQuery {\r\n\t\tallDataJson {\r\n\t\t\tedges {\r\n\t\t\t\tnode {\r\n\t\t\t\t\towners {\r\n\t\t\t\t\t\tname\r\n\t\t\t\t\t\tfantasyname\r\n\t\t\t\t\t\tid\r\n\t\t\t\t\t\timage\r\n\t\t\t\t\t\tstatus\r\n\t\t\t\t\t}\r\n\t\t\t\t\tyears{\r\n\t\t\t\t\t\tweeks_games {\r\n\t\t\t\t\t\t\tgames {\r\n\t\t\t\t\t\t\t\tweek\r\n\t\t\t\t\t\t\t\tplayoffTierType\r\n\t\t\t\t\t\t\t\twinner\r\n\t\t\t\t\t\t\t\tteam_a {\r\n\t\t\t\t\t\t\t\t\tname\r\n\t\t\t\t\t\t\t\t\towner\r\n\t\t\t\t\t\t\t\t\townerId\r\n\t\t\t\t\t\t\t\t\tlogo\r\n\t\t\t\t\t\t\t\t\tscore\r\n\t\t\t\t\t\t\t\t\trank\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tteam_b {\r\n\t\t\t\t\t\t\t\t\tname\r\n\t\t\t\t\t\t\t\t\towner\r\n\t\t\t\t\t\t\t\t\townerId\r\n\t\t\t\t\t\t\t\t\tlogo\r\n\t\t\t\t\t\t\t\t\tscore\r\n\t\t\t\t\t\t\t\t\trank\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tyear\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} \r\n\t\t\t}\r\n\t\t}\r\n}\r\n`;\r\n"],"sourceRoot":""}