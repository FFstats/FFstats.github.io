{"version":3,"file":"component---src-pages-tsx-3244c7454cb279040524.js","mappings":"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","sources":["webpack://gatsby-starter-hello-world/./node_modules/core-js/modules/es.array.unscopables.flat.js","webpack://gatsby-starter-hello-world/./src/components/MessageCard.tsx","webpack://gatsby-starter-hello-world/./src/components/DialogModal.tsx","webpack://gatsby-starter-hello-world/./src/hooks/useOnClickOutside.js","webpack://gatsby-starter-hello-world/./src/components/LeagueForm/EditLeagueForm.tsx","webpack://gatsby-starter-hello-world/./src/components/LeagueForm/AddAndClaimLeagueForm.tsx","webpack://gatsby-starter-hello-world/./src/components/MergeLeaguesForm/index.tsx","webpack://gatsby-starter-hello-world/./src/components/MergeLeaguesForm/CreateMergedLeagueForm.tsx","webpack://gatsby-starter-hello-world/./src/components/MergeLeaguesForm/EditMergedLeagueForm.tsx","webpack://gatsby-starter-hello-world/./src/components/LeaguesTable.tsx","webpack://gatsby-starter-hello-world/./src/app/Dashboard.tsx","webpack://gatsby-starter-hello-world/./src/components/AppNavbar.tsx","webpack://gatsby-starter-hello-world/./src/components/VerifyEmailMessage.tsx","webpack://gatsby-starter-hello-world/./src/components/PrivateRoute.tsx","webpack://gatsby-starter-hello-world/./src/app/EmailCodes.tsx","webpack://gatsby-starter-hello-world/./src/app/MergeLeagues.tsx","webpack://gatsby-starter-hello-world/./src/pages/[...].tsx"],"sourcesContent":["// this method was added to unscopables after implementation\n// in popular engines, so it's moved to a separate module\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('flat');\n","import React from 'react';\r\nimport Logo from '../images/logo.jpeg';\r\n\r\nexport type MessageCardAlert = {\r\n    content: string;\r\n    type: 'success' | 'error' | '';\r\n};\r\ninterface Props {\r\n    children: React.ReactNode;\r\n    logoPosition?: 'left' | 'center' | 'none';\r\n    alert?: MessageCardAlert;\r\n}\r\n\r\nconst logoPositionClass = {\r\n    left: '',\r\n    center: 'mx-auto',\r\n    none: 'hidden',\r\n};\r\n\r\nexport const MessageCard: React.FC<Props> = ({ logoPosition = 'left', alert, children }) => {\r\n    return (\r\n        <div className=\"max-w-xl p-3.5 bg-white rounded shadow-md md:p-5\">\r\n            <img\r\n                src={Logo}\r\n                alt=\"Fantasy Franchise Logo\"\r\n                className={`object-contain h-24 mb-5 ${logoPositionClass[logoPosition]}`}\r\n                height={96}\r\n            />\r\n            {alert?.content && (\r\n                <p\r\n                    className={`\r\n                        w-full\r\n                        text-center mb-4 py-4 -mt-1 rounded-sm\r\n                        ${\r\n                            alert.type === 'error'\r\n                                ? 'text-danger-500 bg-red-100'\r\n                                : 'text-primary-500 bg-primary-100'\r\n                        }\r\n                    `}\r\n                >\r\n                    {alert.content}\r\n                </p>\r\n            )}\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { useEffect, useRef } from 'react';\r\nimport { useOnClickOutside } from '../hooks/useOnClickOutside';\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLDialogElement> {\r\n    isOpened: boolean;\r\n    onProceed?: () => void;\r\n    onClose: () => void;\r\n    children: React.ReactNode;\r\n}\r\n\r\nexport const DialogModal: React.FC<Props> = ({\r\n    isOpened,\r\n    onProceed,\r\n    onClose,\r\n    children,\r\n    ...rest\r\n}) => {\r\n    const ref = useRef<HTMLDialogElement>(null);\r\n    useOnClickOutside(ref, () => onClose());\r\n\r\n    useEffect(() => {\r\n        if (isOpened) {\r\n            if (ref.current && ref.current.showModal) {\r\n                ref.current.showModal();\r\n            }\r\n            document.body.classList.add('modal-open'); // prevent bg scroll\r\n        } else {\r\n            if (ref.current && ref.current.close) {\r\n                ref.current.close();\r\n            }\r\n            document.body.classList.remove('modal-open');\r\n        }\r\n    }, [isOpened]);\r\n\r\n    const proceedAndClose = () => {\r\n        // onProceed();\r\n        onClose();\r\n    };\r\n\r\n    const preventAutoClose = (e: any) => e.stopPropagation();\r\n\r\n    return (\r\n        <dialog\r\n            ref={ref}\r\n            onCancel={onClose}\r\n            onClick={onClose}\r\n            className=\"relative p-2 rounded\"\r\n            onSubmit={preventAutoClose}\r\n            {...rest}\r\n        >\r\n            <button\r\n                aria-label=\"Close\"\r\n                className=\"absolute text-3xl right-4 top-2\"\r\n                onClick={onClose}\r\n            >\r\n                <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n            <div onClick={preventAutoClose}>{children}</div>\r\n        </dialog>\r\n    );\r\n};\r\n","import { useEffect } from 'react';\r\n\r\nexport function useOnClickOutside(ref, handler) {\r\n    useEffect(\r\n        () => {\r\n            const listener = (event) => {\r\n                var rect = ref.current.getBoundingClientRect();\r\n                var isInDialog =\r\n                    rect.top <= event.clientY &&\r\n                    event.clientY <= rect.top + rect.height &&\r\n                    rect.left <= event.clientX &&\r\n                    event.clientX <= rect.left + rect.width;\r\n\r\n                if (!isInDialog) {\r\n                    handler();\r\n                }\r\n            };\r\n            document.addEventListener('mousedown', listener);\r\n            document.addEventListener('touchstart', listener);\r\n            return () => {\r\n                document.removeEventListener('mousedown', listener);\r\n                document.removeEventListener('touchstart', listener);\r\n            };\r\n        },\r\n        // Add ref and handler to effect dependencies\r\n        // It's worth noting that because passed in handler is a new ...\r\n        // ... function on every render that will cause this effect ...\r\n        // ... callback/cleanup to run every render. It's not a big deal ...\r\n        // ... but to optimize you can wrap handler in useCallback before ...\r\n        // ... passing it into this hook.\r\n        [ref, handler]\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { LeagueForm, LeagueFormState, LeagueFormStateConfig } from './index';\r\nimport { League } from '../../types/League';\r\nimport { useLeagueStore } from '../../store/league';\r\nimport { convertIntoComposedObject, convertIntoFlatObject, getChangedValues } from '../../utils';\r\n\r\ninterface Props {\r\n    league: League;\r\n    onEditEnd?: () => void;\r\n}\r\nexport const EditLeagueForm: React.FC<Props> = ({ league, onEditEnd }) => {\r\n    const [alertMessage, setAlertMessage] = React.useState('');\r\n    const { updateLeague } = useLeagueStore((state) => {\r\n        return {\r\n            updateLeague: state.updateLeague,\r\n        };\r\n    });\r\n\r\n    const config: LeagueFormStateConfig = convertIntoComposedObject(league, 'initialValue');\r\n\r\n    async function handleSubmit(values: LeagueFormState) {\r\n        const initialValues = convertIntoFlatObject<LeagueFormState>(config, 'initialValue');\r\n        const changedValues = getChangedValues(initialValues, values);\r\n\r\n        // removing deprecated fields\r\n        delete changedValues.email;\r\n        delete changedValues.name;\r\n\r\n        try {\r\n            await updateLeague(league.id, changedValues, initialValues);\r\n            if (onEditEnd) {\r\n                onEditEnd();\r\n            }\r\n        } catch (err: any) {\r\n            setAlertMessage(err.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <LeagueForm\r\n            title=\"Edit League\"\r\n            onSubmit={handleSubmit}\r\n            config={config}\r\n            standalone\r\n            localAlertText={alertMessage}\r\n        />\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { LeagueForm, LeagueFormState } from './index';\r\nimport { useLeagueStore } from '../../store/league';\r\nimport { UserState, useUserStore } from '../../store/user';\r\nimport { getFirebase } from '../../lib/firebase';\r\nimport { LeagueInput, Platform } from '../../types/League';\r\n\r\ninterface Props {\r\n    onSubmit?: () => void;\r\n}\r\n\r\ntype ClaimLeague = {\r\n    message: string;\r\n    show: boolean;\r\n    leagueid?: string;\r\n    platform?: string;\r\n};\r\n\r\nexport const AddAndClaimLeagueForm: React.FC<Props> = ({ onSubmit }) => {\r\n    const firebase = getFirebase();\r\n    const [error, setError] = React.useState('');\r\n    const { createLeague, canLeagueBeClaimed, updateLeague } = useLeagueStore((state) => {\r\n        return {\r\n            createLeague: state.createLeague,\r\n            canLeagueBeClaimed: state.canLeagueBeClaimed,\r\n            updateLeague: state.updateLeague,\r\n        };\r\n    });\r\n    const user = useUserStore((state: UserState) => state.user);\r\n    const [claimLeague, setClaimLeague] = React.useState<ClaimLeague>({\r\n        message: '',\r\n        show: false,\r\n    });\r\n\r\n    async function handleSubmit(formState: LeagueFormState) {\r\n        try {\r\n            await createLeague(formState);\r\n            if (onSubmit) {\r\n                onSubmit();\r\n            }\r\n        } catch (err) {\r\n            const canBeClaimed = await canLeagueBeClaimed(formState.leagueid, formState.platform);\r\n            if (canBeClaimed) {\r\n                setClaimLeague({\r\n                    message: `The league ${formState.platform}-${formState.leagueid} already exists. Would you like to claim it?`,\r\n                    show: true,\r\n                    leagueid: formState.leagueid,\r\n                    platform: formState.platform,\r\n                });\r\n            } else {\r\n                setError(err.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    async function handleClaimLeague() {\r\n        const { leagueid, platform } = claimLeague;\r\n        if (leagueid && platform && user?.uid) {\r\n            try {\r\n                await updateLeague(\r\n                    `${platform}-${leagueid}`,\r\n                    {\r\n                        leagueid: leagueid,\r\n                        platform: platform as Platform,\r\n                        userId: user.uid,\r\n                        createdAt: firebase.firestore.Timestamp.fromDate(new Date()),\r\n                    },\r\n                    { leagueid, platform: platform as Platform } as LeagueInput\r\n                );\r\n                if (onSubmit) {\r\n                    onSubmit();\r\n                }\r\n            } catch (err) {\r\n                setError(err.message);\r\n                setClaimLeague({\r\n                    message: '',\r\n                    show: false,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    function cancelClaimLeague() {\r\n        setClaimLeague({\r\n            message: '',\r\n            show: false,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={`${claimLeague.show ? 'hidden' : 'block'}`}>\r\n                <LeagueForm\r\n                    title=\"Add League\"\r\n                    onSubmit={handleSubmit}\r\n                    standalone\r\n                    localAlertText={error}\r\n                    sendNotification\r\n                />\r\n            </div>\r\n            {claimLeague.show && (\r\n                <div className=\"flex flex-col items-center max-w-sm gap-5 p-3 text-center\">\r\n                    <p>{claimLeague.message}</p>\r\n                    <div className=\"flex gap-3\">\r\n                        <button className=\"base-button\" onClick={handleClaimLeague}>\r\n                            Claim League\r\n                        </button>\r\n                        <button\r\n                            className=\"base-button base-button--danger\"\r\n                            onClick={cancelClaimLeague}\r\n                        >\r\n                            Cancel\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { League } from '../../types/League';\r\nimport { convertIntoFlatObject } from '../../utils';\r\n\r\nexport type GeneratedPartiallyMergedLeague = Pick<Partial<League>, 'leagues'> &\r\n    Pick<League, 'slug' | 'platform' | 'consolationGames' | 'status'>;\r\n\r\nexport type LeagueFormStateConfig = {\r\n    [K in keyof GeneratedPartiallyMergedLeague]: {\r\n        initialValue: GeneratedPartiallyMergedLeague[K];\r\n        disabled: boolean;\r\n    };\r\n};\r\n\r\ninterface Props {\r\n    title?: string;\r\n    config?: LeagueFormStateConfig;\r\n    onSubmit: (mergedLeague: GeneratedPartiallyMergedLeague) => Promise<void>;\r\n}\r\n\r\nconst MergeLeaguesForm: React.FC<Props> = ({\r\n    title = 'Merge Leagues',\r\n    config = {} as LeagueFormStateConfig,\r\n    onSubmit,\r\n}) => {\r\n    const initialValues: GeneratedPartiallyMergedLeague = convertIntoFlatObject(\r\n        config,\r\n        'initialValue'\r\n    );\r\n    const [disabled, setDisabled] = React.useState(false);\r\n    const [errorMessage, setErrorMessage] = React.useState('');\r\n\r\n    async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n        setDisabled(true);\r\n        e.preventDefault();\r\n\r\n        const slug = (e.target as any).elements.slug.value;\r\n        const leagueData: GeneratedPartiallyMergedLeague = {\r\n            slug,\r\n            platform: 'merged',\r\n            consolationGames: false,\r\n            status: 'generating',\r\n        };\r\n\r\n        try {\r\n            await onSubmit(leagueData);\r\n        } catch (error: any) {\r\n            setErrorMessage(error.message);\r\n        }\r\n        setDisabled(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-col max-w-sm gap-3 p-3\">\r\n            <h2>{title}</h2>\r\n            <form className=\"flex flex-col items-start gap-3\" onSubmit={handleSubmit}>\r\n                <div aria-live=\"polite\" className=\"empty:hidden\">\r\n                    {errorMessage.length > 0 && <p className=\"text-danger-500\">{errorMessage}</p>}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"slug\">League Id</label>\r\n                    <input\r\n                        className=\"base-field\"\r\n                        name=\"slug\"\r\n                        id=\"slug\"\r\n                        required\r\n                        pattern=\"^[a-zA-Z0-9-_]+$\"\r\n                        defaultValue={config?.slug?.initialValue || ''}\r\n                    />\r\n                    <label htmlFor=\"slug\" className=\"base-field__info\">\r\n                        This will be the url where the new league lives. For example\r\n                        https://fantasy-franchise.com/[league-id]\r\n                    </label>\r\n                </div>\r\n                <button disabled={disabled} className=\"base-button\">\r\n                    Merge Leagues\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\nexport default MergeLeaguesForm;\r\n","import React from 'react';\r\nimport { League, LeagueInput } from '../../types/League';\r\nimport MergeLeaguesForm, { GeneratedPartiallyMergedLeague } from './index';\r\nimport { generateDocumentLeagueId, generateMergedLeagueId } from '../../utils/leagueUtils';\r\nimport { useLeagueStore } from '../../store/league';\r\nimport { useUserStore, UserState } from '../../store/user';\r\nimport { User } from '../../types/User';\r\nimport services from '../../services';\r\n\r\ninterface Props {\r\n    league1: League;\r\n    league2: League;\r\n    onSubmit: () => void;\r\n}\r\n\r\nexport const CreateMergedLeagueForm: React.FC<Props> = ({ league1, league2, onSubmit }) => {\r\n    const user = useUserStore((state: UserState) => state.user);\r\n    const { createLeague, getLeagues } = useLeagueStore((state) => {\r\n        return {\r\n            createLeague: state.createLeague,\r\n            getLeagues: state.getLeagues,\r\n        };\r\n    });\r\n\r\n    async function handleSubmit(partialMergedLeague: GeneratedPartiallyMergedLeague) {\r\n        const mergedLeague: LeagueInput = {\r\n            ...partialMergedLeague,\r\n            leagueid: generateMergedLeagueId(league1, league2),\r\n            leagues: [league1.id, league2.id],\r\n        };\r\n\r\n        try {\r\n            await createLeague(mergedLeague);\r\n            await getLeagues(user as User);\r\n            await services.leagueService.sendLeagueMergedNotification(\r\n                user?.email || user?.displayName || '',\r\n                generateDocumentLeagueId(league1),\r\n                generateDocumentLeagueId(league2),\r\n                mergedLeague.slug as string\r\n            );\r\n            onSubmit();\r\n        } catch (err: any) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    return <MergeLeaguesForm onSubmit={handleSubmit} />;\r\n};\r\n","import React from 'react';\r\nimport MergeLeaguesForm, { GeneratedPartiallyMergedLeague, LeagueFormStateConfig } from './index';\r\nimport { League } from '../../types/League';\r\nimport { useLeagueStore } from '../../store/league';\r\nimport { useUserStore, UserState } from '../../store/user';\r\nimport { convertIntoComposedObject, convertIntoFlatObject, getChangedValues } from '../../utils';\r\n\r\ninterface Props {\r\n    league: League;\r\n    onSubmit: () => void;\r\n}\r\n\r\nexport const EditMergedLeagueForm: React.FC<Props> = ({ league, onSubmit }) => {\r\n    const user = useUserStore((state: UserState) => state.user);\r\n    const { updateLeague, getLeagues } = useLeagueStore((state) => {\r\n        return {\r\n            updateLeague: state.updateLeague,\r\n            getLeagues: state.getLeagues,\r\n            leagues: state.leagues,\r\n        };\r\n    });\r\n\r\n    const config: LeagueFormStateConfig = convertIntoComposedObject(league, 'initialValue');\r\n\r\n    async function handleSubmit(partialMergedLeague: GeneratedPartiallyMergedLeague) {\r\n        const initialValues = convertIntoFlatObject<GeneratedPartiallyMergedLeague>(\r\n            config,\r\n            'initialValue'\r\n        );\r\n        const changedValues = getChangedValues(initialValues, partialMergedLeague);\r\n        if (Object.keys(changedValues).length === 0) {\r\n            throw new Error('Failed updating league: no changes detected');\r\n        } else {\r\n            try {\r\n                await updateLeague(league.id, changedValues, league);\r\n                if (user) {\r\n                    await getLeagues(user);\r\n                }\r\n                onSubmit();\r\n            } catch (err: any) {\r\n                throw err;\r\n            }\r\n        }\r\n    }\r\n\r\n    return <MergeLeaguesForm title=\"Edit Merged League\" onSubmit={handleSubmit} config={config} />;\r\n};\r\n","import React from 'react';\r\nimport { useUserStore, UserState } from '../store/user';\r\nimport { useLeagueStore } from '../store/league';\r\nimport { League, platformsOptions } from '../types/League';\r\nimport { navigate } from 'gatsby';\r\nimport { APP_ROUTES } from '../constants';\r\nimport { DialogModal } from './DialogModal';\r\nimport { EditLeagueForm } from './LeagueForm/EditLeagueForm';\r\nimport { AddAndClaimLeagueForm } from './LeagueForm/AddAndClaimLeagueForm';\r\nimport { CreateMergedLeagueForm } from './MergeLeaguesForm/CreateMergedLeagueForm';\r\nimport { EditMergedLeagueForm } from './MergeLeaguesForm/EditMergedLeagueForm';\r\n\r\nconst thClasses = 'px-6 py-3';\r\nconst tdClasses = 'px-6 py-4';\r\n\r\nconst LeaguesTable: React.FC<{ showAddLeagueForm: string }> = ({ showAddLeagueForm }) => {\r\n    const [isModalOpen, setIsModalOpen] = React.useState(false);\r\n    const [selectedLeague, setSelectedLeague] = React.useState<League | null>(null);\r\n    const [mergedLeagueToEdit, setMergedLeagueToEdit] = React.useState<League | null>(null);\r\n    const [isMergeModalOpen, setIsMergeModalOpen] = React.useState(false);\r\n    const [isAddLeagueModalOpen, setIsAddLeagueModalOpen] = React.useState(false);\r\n\r\n    const user = useUserStore((state: UserState) => state.user);\r\n    const { leagues, getLeagues } = useLeagueStore((state) => {\r\n        return {\r\n            leagues: state.leagues,\r\n            getLeagues: state.getLeagues,\r\n        };\r\n    });\r\n    const [leaguesToMerge, setLeaguesToMerge] = React.useState<League[]>([]);\r\n\r\n    React.useEffect(() => {\r\n        if (typeof window !== 'undefined') {\r\n            const urlParams = new URLSearchParams(window.location.search);\r\n            const mode = urlParams.get('mode');\r\n\r\n            if (mode === 'add') {\r\n                setIsAddLeagueModalOpen(true);\r\n            }\r\n        }\r\n    }, [showAddLeagueForm]);\r\n\r\n    function handleEdit(league: League) {\r\n        if (league.platform === 'merged') {\r\n            setMergedLeagueToEdit(league);\r\n        } else {\r\n            setSelectedLeague(league);\r\n            setIsModalOpen(true);\r\n        }\r\n    }\r\n\r\n    function onCloseEditModal() {\r\n        setIsModalOpen(false);\r\n    }\r\n\r\n    function onCloseAddLeagueModal() {\r\n        setIsAddLeagueModalOpen(false);\r\n        if (typeof window !== 'undefined') {\r\n            const url = window.location.href;\r\n            const newUrl = url.replace('?mode=add', '');\r\n            window.history.replaceState({}, '', newUrl);\r\n        }\r\n    }\r\n\r\n    function handleLeagueClick(league: League) {\r\n        if (leaguesToMerge.some((item) => item.id === league.id)) {\r\n            setLeaguesToMerge(leaguesToMerge.filter((item) => item.id !== league.id));\r\n        } else {\r\n            if (leaguesToMerge.length === 2) {\r\n                const newLeaguesToMerge = [...leaguesToMerge];\r\n                newLeaguesToMerge.shift();\r\n                newLeaguesToMerge.push(league);\r\n                setLeaguesToMerge(newLeaguesToMerge);\r\n            } else {\r\n                setLeaguesToMerge([...leaguesToMerge, league]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function onCloseMergeModal() {\r\n        setIsMergeModalOpen(false);\r\n        setLeaguesToMerge([]);\r\n    }\r\n\r\n    let sortedLeagues = leagues\r\n        ? leagues.sort((a, b) => {\r\n              if (a.createdAt && b.createdAt) {\r\n                  return b.createdAt.seconds - a.createdAt.seconds;\r\n              } else {\r\n                  return 0;\r\n              }\r\n          })\r\n        : [];\r\n\r\n    return (\r\n        <>\r\n            <div className=\"flex gap-3\">\r\n                <button className=\"base-button\" onClick={() => setIsAddLeagueModalOpen(true)}>\r\n                    Add League\r\n                </button>\r\n                <button\r\n                    className=\"base-button\"\r\n                    disabled={leaguesToMerge.length !== 2}\r\n                    onClick={() => setIsMergeModalOpen(true)}\r\n                >\r\n                    Merge leagues\r\n                </button>\r\n            </div>\r\n            {leagues && leagues.length > 0 && (\r\n                <div className=\"relative mt-4 overflow-x-auto shadow sm:rounded-md\">\r\n                    <table\r\n                        aria-label={`Leagues of ${user?.displayName}`}\r\n                        className=\"w-full px-6 py-4 text-sm text-left text-gray-500\"\r\n                    >\r\n                        <thead className=\"text-xs uppercase text-primary-800 bg-primary-100\">\r\n                            <tr>\r\n                                <th className={thClasses}>Merge</th>\r\n                                <th className={thClasses}>Name</th>\r\n                                <th className={thClasses}>Platform</th>\r\n                                <th className={thClasses}>League Id</th>\r\n                                <th className={thClasses}>Consolation Games</th>\r\n                                <th className={thClasses}>Status</th>\r\n                                <th className={thClasses}>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {sortedLeagues.map((league, i) => {\r\n                                return (\r\n                                    <tr\r\n                                        key={i}\r\n                                        className=\"bg-white border-b cursor-pointer hover:bg-gray-100\"\r\n                                    >\r\n                                        <td\r\n                                            className={tdClasses}\r\n                                            onClick={(e) => e.stopPropagation()}\r\n                                        >\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                checked={leaguesToMerge.some(\r\n                                                    (item) => item.id === league.id\r\n                                                )}\r\n                                                onChange={() => {\r\n                                                    handleLeagueClick(league);\r\n                                                }}\r\n                                                disabled={league.platform === 'merged'}\r\n                                            />\r\n                                        </td>\r\n                                        <td>\r\n                                            {league.slug || `${league.platform}-${league.leagueid}`}\r\n                                        </td>\r\n                                        <td className={tdClasses}>\r\n                                            {platformsOptions[league.platform].label}\r\n                                        </td>\r\n                                        <td className={tdClasses}>{league.leagueid}</td>\r\n                                        <td className={tdClasses}>\r\n                                            {league.consolationGames ? 'Yes' : 'No'}\r\n                                        </td>\r\n                                        <td className={`${tdClasses} capitalize`}>\r\n                                            {league?.status || 'Active'}\r\n                                        </td>\r\n                                        <td>\r\n                                            <div className=\"flex gap-2\">\r\n                                                <button\r\n                                                    className=\"base-button\"\r\n                                                    onClick={() => handleEdit(league)}\r\n                                                >\r\n                                                    Edit\r\n                                                </button>\r\n                                                <button\r\n                                                    className=\"base-button\"\r\n                                                    // disabled={league.status === 'generating'}\r\n                                                    onClick={() =>\r\n                                                        navigate(\r\n                                                            `${APP_ROUTES.MERGE_LEAGUES}/${\r\n                                                                league?.slug ||\r\n                                                                `${league.platform}-${league.leagueid}`\r\n                                                            }`\r\n                                                        )\r\n                                                    }\r\n                                                >\r\n                                                    Merge Duplicates\r\n                                                </button>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                );\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )}\r\n            <DialogModal isOpened={isModalOpen} onClose={onCloseEditModal} aria-label=\"Edit League\">\r\n                {selectedLeague && isModalOpen && (\r\n                    <EditLeagueForm\r\n                        league={selectedLeague}\r\n                        onEditEnd={() => setIsModalOpen(false)}\r\n                    />\r\n                )}\r\n            </DialogModal>\r\n            <DialogModal\r\n                isOpened={isMergeModalOpen}\r\n                onClose={onCloseMergeModal}\r\n                aria-label=\"Merge Leagues\"\r\n            >\r\n                <CreateMergedLeagueForm\r\n                    league1={leaguesToMerge[0]}\r\n                    league2={leaguesToMerge[1]}\r\n                    onSubmit={onCloseMergeModal}\r\n                />\r\n            </DialogModal>\r\n            {isAddLeagueModalOpen && (\r\n                <DialogModal\r\n                    isOpened={isAddLeagueModalOpen}\r\n                    onClose={onCloseAddLeagueModal}\r\n                    aria-label=\"Add League\"\r\n                >\r\n                    <AddAndClaimLeagueForm\r\n                        onSubmit={() => {\r\n                            onCloseAddLeagueModal();\r\n                            if (user) {\r\n                                getLeagues(user);\r\n                            }\r\n                        }}\r\n                    />\r\n                </DialogModal>\r\n            )}\r\n            <DialogModal\r\n                isOpened={!!mergedLeagueToEdit}\r\n                onClose={() => setMergedLeagueToEdit(null)}\r\n                aria-label=\"Edit Merged League\"\r\n            >\r\n                {mergedLeagueToEdit && (\r\n                    <EditMergedLeagueForm\r\n                        league={mergedLeagueToEdit}\r\n                        onSubmit={() => setMergedLeagueToEdit(null)}\r\n                    />\r\n                )}\r\n            </DialogModal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LeaguesTable;\r\n","import React from 'react';\r\nimport { RouteComponentProps, useLocation } from '@reach/router';\r\nimport LeaguesTable from '../components/LeaguesTable';\r\n\r\nconst Dashboard: React.FC<RouteComponentProps> = () => {\r\n    const { state } = useLocation();\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <LeaguesTable\r\n                showAddLeagueForm={\r\n                    (state as { showAddLeagueForm?: string })?.showAddLeagueForm || ''\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\nimport Logo from '../images/logo.jpeg';\r\nimport { Link, navigate } from 'gatsby';\r\nimport { useUserStore, UserState } from '../store/user';\r\nimport { APP_ROUTES } from '../constants';\r\n\r\nconst AppNavbar = () => {\r\n    const { user, logOut, loading } = useUserStore((state: UserState) => {\r\n        return {\r\n            user: state.user,\r\n            logOut: state.logOut,\r\n            loading: state.loading,\r\n        };\r\n    });\r\n\r\n    function handleAddLeagueClick() {\r\n        navigate(APP_ROUTES.DASHBOARD + `?mode=add`, {\r\n            replace: true,\r\n            state: {\r\n                showAddLeagueForm: new Date(),\r\n            },\r\n        });\r\n    }\r\n\r\n    if (loading || !user) return null;\r\n\r\n    return (\r\n        <header className=\"bg-white sticky top-0\" data-component=\"app-navbar\">\r\n            <div className=\"container py-3 flex justify-between items-center flex-col md:flex-row gap-3\">\r\n                <div>\r\n                    <Link to={APP_ROUTES.DASHBOARD}>\r\n                        <img src={Logo} alt=\"logo\" className=\"object-contain h-12\" />\r\n                    </Link>\r\n                </div>\r\n                <ul className=\"flex gap-3 items-center text-sm md:text-base\">\r\n                    <li>\r\n                        <button onClick={handleAddLeagueClick}>Add League</button>\r\n                    </li>\r\n                    <li>\r\n                        <Link to={APP_ROUTES.DASHBOARD}>Dashboard</Link>\r\n                    </li>\r\n                    <li>{user?.displayName || user?.email}</li>\r\n                    <li>\r\n                        <button\r\n                            className=\"hover:text-primary-500 focus:text-primary-500\"\r\n                            onClick={logOut}\r\n                        >\r\n                            Log Out\r\n                        </button>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React from 'react';\r\nimport { useUserStore, UserState } from '../store/user';\r\nimport { Loading } from '../components/Loading';\r\nimport { MessageCard, MessageCardAlert } from '../components/MessageCard';\r\n\r\nconst VerifyEmail = () => {\r\n    const [sendVerificationEmail, logOut, loading] = useUserStore((state: UserState) => [\r\n        state.sendVerificationEmail,\r\n        state.logOut,\r\n        state.loading,\r\n    ]);\r\n    const [message, setMessage] = React.useState<MessageCardAlert>({\r\n        content: '',\r\n        type: '',\r\n    });\r\n\r\n    const [disabled, setDisabled] = React.useState(false);\r\n\r\n    async function handleSendPasswordResetEmail() {\r\n        setDisabled(true);\r\n        try {\r\n            await sendVerificationEmail();\r\n            setMessage({\r\n                content: 'Email sent! Check your inbox',\r\n                type: 'success',\r\n            });\r\n        } catch (err: any) {\r\n            setMessage({\r\n                content: 'There was an error sending the verification email',\r\n                type: 'error',\r\n            });\r\n        }\r\n    }\r\n\r\n    if (loading) return <Loading />;\r\n\r\n    return (\r\n        <main className=\"message-page-container page--no-navbar\">\r\n            <MessageCard logoPosition=\"center\" alert={message}>\r\n                <div className=\"flex flex-col gap-4 items-center\">\r\n                    <div className=\"text-center\">\r\n                        <p>To use your account, you need to verify your email address.</p>\r\n                        <p>\r\n                            If you haven't received the verification email, please check your spam\r\n                            folder or{' '}\r\n                            <button\r\n                                onClick={handleSendPasswordResetEmail}\r\n                                disabled={disabled}\r\n                                className=\"base-button--link\"\r\n                            >\r\n                                click here to resend\r\n                            </button>\r\n                        </p>\r\n                    </div>\r\n                    <button onClick={logOut} className=\"base-button--link\">\r\n                        Log Out\r\n                    </button>\r\n                </div>\r\n            </MessageCard>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default VerifyEmail;\r\n","import React from 'react';\r\nimport { navigate } from 'gatsby';\r\nimport { RouteComponentProps } from '@reach/router';\r\nimport { UserState, useUserStore } from '../store/user';\r\nimport { Loading } from './Loading';\r\nimport { APP_ROUTES } from '../constants';\r\nimport VerifyEmail from './VerifyEmailMessage';\r\nimport { useLeagueStore } from '../store/league';\r\n\r\ntype Props = RouteComponentProps & {\r\n    component: React.FC;\r\n};\r\n\r\nconst PrivateRoute: React.FC<Props> = ({ component: Component, location, ...rest }) => {\r\n    const { user, loading: userLoading } = useUserStore((state: UserState) => {\r\n        return {\r\n            user: state.user,\r\n            loading: state.loading,\r\n        };\r\n    });\r\n\r\n    const {\r\n        loading: leaguesLoading,\r\n        leagues,\r\n        getLeagues,\r\n    } = useLeagueStore((state) => {\r\n        return {\r\n            loading: state.loading,\r\n            leagues: state.leagues,\r\n            getLeagues: state.getLeagues,\r\n        };\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        // initially fetches leagues\r\n        console.log(leagues);\r\n        if (user && leagues === null && leaguesLoading === false) {\r\n            getLeagues(user);\r\n        }\r\n    }, [user, leagues, leaguesLoading]);\r\n\r\n    if (userLoading || leaguesLoading) return <Loading />;\r\n\r\n    if (!user && location?.pathname !== APP_ROUTES.LOGIN) {\r\n        navigate(APP_ROUTES.LOGIN);\r\n        return null;\r\n    }\r\n\r\n    if (user?.emailVerified === false) {\r\n        return <VerifyEmail />;\r\n    }\r\n\r\n    return <Component {...(rest as any)} />;\r\n};\r\n\r\nexport default PrivateRoute;\r\n","// Page for handling password recovery and email verification\r\nimport React from 'react';\r\nimport { MessageCard, MessageCardAlert } from '../components/MessageCard';\r\nimport { Link, navigate } from 'gatsby';\r\nimport { UserState, useUserStore } from '../store/user';\r\nimport { RouteComponentProps, useParams } from '@reach/router';\r\nimport { APP_ROUTES } from '../constants';\r\n\r\ntype Params = {\r\n    mode?: 'resetPassword' | 'verifyEmail';\r\n    oobCode?: string;\r\n};\r\n\r\nconst mode: any = (\r\n    typeof window !== 'undefined'\r\n        ? new URLSearchParams(window.location.search).get('mode')\r\n        : undefined\r\n) as undefined | null | 'resetPassword' | 'verifyEmail';\r\n\r\nconst oobCode: any =\r\n    typeof window !== 'undefined'\r\n        ? new URLSearchParams(window.location.search).get('oobCode')\r\n        : (null as undefined | null | string);\r\n\r\nconst EmailCodes: React.FC<RouteComponentProps> = () => {\r\n    const [message, setMessage] = React.useState<MessageCardAlert>({\r\n        content: '',\r\n        type: '',\r\n    });\r\n    const [disabled, setDisabled] = React.useState(false);\r\n    const { applyPasswordResetCode, applyVerificationCode } = useUserStore((state: UserState) => {\r\n        return {\r\n            applyPasswordResetCode: state.applyPasswordResetCode,\r\n            applyVerificationCode: state.applyVerificationCode,\r\n        };\r\n    });\r\n\r\n    async function handlePasswordReset(e: React.FormEvent<HTMLFormElement>) {\r\n        e.preventDefault();\r\n        if (oobCode) {\r\n            setDisabled(true);\r\n            const newPassword = (e.target as any).elements.password.value;\r\n            await applyPasswordResetCode(oobCode, newPassword);\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        async function verifyEmail() {\r\n            if (mode === 'verifyEmail' && oobCode) {\r\n                try {\r\n                    await applyVerificationCode(oobCode);\r\n                    setMessage({\r\n                        content: 'Your email has been verified',\r\n                        type: 'success',\r\n                    });\r\n                } catch (err: any) {\r\n                    setMessage({\r\n                        content: 'There was an error verifying your email',\r\n                        type: 'error',\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        verifyEmail();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"message-page-container page--no-navbar\">\r\n            <MessageCard alert={message}>\r\n                {mode === 'resetPassword' && (\r\n                    <form\r\n                        onSubmit={handlePasswordReset}\r\n                        className=\"flex flex-col items-start gap-3\"\r\n                    >\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"new-password\">New Password</label>\r\n                            <input\r\n                                id=\"new-password\"\r\n                                className=\"base-field\"\r\n                                type=\"password\"\r\n                                name=\"password\"\r\n                                required\r\n                                minLength={8}\r\n                            />\r\n                        </div>\r\n                        <button className=\"base-button\" disabled={disabled}>\r\n                            Reset Password\r\n                        </button>\r\n                        {message.type === 'success' && <Link to={APP_ROUTES.LOGIN}>Log In</Link>}\r\n                    </form>\r\n                )}\r\n                {mode === 'verifyEmail' && (\r\n                    <>\r\n                        {message.type === 'success' && (\r\n                            <div className=\"flex justify-center\">\r\n                                <Link to=\"/dashboard\" replace>\r\n                                    Go to dashboard\r\n                                </Link>\r\n                            </div>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </MessageCard>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EmailCodes;\r\n","import React from 'react';\r\nimport { RouteComponentProps, useParams } from '@reach/router';\r\nimport { useLeagueStore } from '../store/league';\r\nimport { generateDocumentLeagueId } from '../utils/leagueUtils';\r\nimport { MessageCard } from '../components/MessageCard';\r\nimport { League, LeagueUser } from '../types/League';\r\nimport { useBanner } from '../context/BannerContext';\r\n\r\n/**\r\n * Puts the primaryUser as the first user in the array\r\n */\r\nfunction sortSelectedUsers(selectedUsers: LeagueUser[], primaryUser: LeagueUser | null) {\r\n    if (!primaryUser) return selectedUsers;\r\n    const sortedUsers = selectedUsers.filter(\r\n        (user) => user.ids.toString() !== primaryUser.ids.toString()\r\n    );\r\n\r\n    sortedUsers.unshift(primaryUser);\r\n    return sortedUsers;\r\n}\r\n\r\ntype MergeLeaguesParams = {\r\n    slug: string;\r\n};\r\n\r\nconst ErrorMessage: React.FC<{ slug: string }> = ({ slug }) => {\r\n    return (\r\n        <div className=\"message-page-container\">\r\n            <MessageCard logoPosition=\"none\">\r\n                <p className=\"text-center\">\r\n                    Error getting merge data for <strong>{slug}</strong>. If this error persists\r\n                    contact the admin.\r\n                </p>\r\n            </MessageCard>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst MergeLeaguesLayout: React.FC<{\r\n    slug: string;\r\n    children: React.ReactNode;\r\n    onClick: () => void;\r\n    buttonLabel: string;\r\n}> = ({ slug, children, onClick, buttonLabel }) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"flex flex-col items-start justify-between gap-2 md:items-center md:flex-row\">\r\n                <div>\r\n                    <h2 className=\"text-xl font-semibold\">Merging Dupliates</h2>\r\n                    <h3 className=\"text-lg font-normal\">League: {slug}</h3>\r\n                </div>\r\n\r\n                <button className=\"base-button\" onClick={onClick}>\r\n                    {buttonLabel}\r\n                </button>\r\n            </div>\r\n\r\n            <div className=\"flex flex-col gap-6 mt-4 md:flex-row\">{children}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst LeagueCol: React.FC<{\r\n    league: League;\r\n    onUserClick: (user: LeagueUser) => void;\r\n    selectedUsers: LeagueUser[];\r\n    mergedUsers: LeagueUser[][];\r\n    mergedUsersBeingEdited: LeagueUser[] | null;\r\n}> = ({ league, onUserClick, selectedUsers, mergedUsers, mergedUsersBeingEdited }) => {\r\n    // filter league.users to only include users that are not in mergedUsers but keep them if they are being edited and not in selectedUsers\r\n    let filteredUsers = league.users?.filter((user) => {\r\n        if (mergedUsersBeingEdited) {\r\n            return (\r\n                !mergedUsers\r\n                    .flat()\r\n                    .map((user) => user.ids.toString())\r\n                    .includes(user.ids.toString()) ||\r\n                mergedUsersBeingEdited\r\n                    .map((user) => user.ids.toString())\r\n                    .includes(user.ids.toString())\r\n            );\r\n        } else {\r\n            return !mergedUsers\r\n                .flat()\r\n                .map((user) => user.ids.toString())\r\n                .includes(user.ids.toString());\r\n        }\r\n    });\r\n\r\n    // filter the users with more than one id in the ids array\r\n    filteredUsers = filteredUsers?.filter((user) => user.ids.length === 1);\r\n\r\n    const filteredLeague = { ...league, users: filteredUsers };\r\n\r\n    return (\r\n        <div className=\"merge-leagues-column\">\r\n            <h3 className=\"merge-leagues-column__title\">\r\n                League {generateDocumentLeagueId(league)}\r\n            </h3>\r\n            <ul className=\"merge-leagues-column__list\">\r\n                {filteredLeague.users?.map((user, i) => {\r\n                    return (\r\n                        <li\r\n                            key={i}\r\n                            className={`\r\n                            merge-leagues-column__list-item\r\n                            ${\r\n                                selectedUsers\r\n                                    .map((user) => user.ids.toString())\r\n                                    .includes(user.ids.toString())\r\n                                    ? 'merge-leagues-column__list-item--selected'\r\n                                    : ''\r\n                            }\r\n                        `}\r\n                        >\r\n                            <button\r\n                                onClick={() => onUserClick(user)}\r\n                                className=\"merge-leagues-column__list-item-button\"\r\n                            >\r\n                                {user.name}\r\n                            </button>\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst MergeLeagues: React.FC<RouteComponentProps> = () => {\r\n    /**\r\n     * This component assumes that users in the .users array of leagues with a single id are unmerged\r\n     * and users with multiple ids are merged.\r\n     */\r\n    const { slug }: MergeLeaguesParams = useParams();\r\n    const { leagues, updateLeague } = useLeagueStore((state) => {\r\n        return {\r\n            leagues: state.leagues,\r\n            updateLeague: state.updateLeague,\r\n        };\r\n    });\r\n\r\n    let league1: League | undefined;\r\n    let league2: League | undefined;\r\n\r\n    let currentSlug: string = '';\r\n    const currentLeague = leagues?.find((league) => {\r\n        currentSlug = league.slug || generateDocumentLeagueId(league);\r\n        return currentSlug === slug;\r\n    });\r\n\r\n    const isMergedAndValid = currentLeague?.platform === 'merged' && !!currentLeague?.leagues;\r\n\r\n    if (isMergedAndValid) {\r\n        const [league1Id, league2Id] = currentLeague.leagues as string[];\r\n        league1 = leagues?.find((league) => {\r\n            return league.id === league1Id;\r\n        });\r\n\r\n        league2 = leagues?.find((league) => {\r\n            return league.id === league2Id;\r\n        });\r\n    }\r\n\r\n    function generateInitialMergedUsers(): LeagueUser[][] {\r\n        if (isMergedAndValid && league1 && league2 && currentLeague?.users) {\r\n            const result: LeagueUser[][] = [];\r\n\r\n            for (const combination of currentLeague.users) {\r\n                const league1Users = (league1.users as LeagueUser[]).filter((user) => {\r\n                    return combination.ids.includes(user.ids.toString());\r\n                });\r\n\r\n                const league2Users = (league2.users as LeagueUser[]).filter((user) => {\r\n                    return combination.ids.includes(user.ids.toString());\r\n                });\r\n\r\n                const selectedUsers = [...league1Users, ...league2Users];\r\n                const primaryUser = { name: combination.name, ids: [combination.ids[0]] };\r\n\r\n                result.push(sortSelectedUsers(selectedUsers, primaryUser));\r\n            }\r\n\r\n            return result;\r\n        } else if (currentLeague?.platform !== 'merged' && currentLeague?.users) {\r\n            const result: LeagueUser[][] = [];\r\n            const mergedUsers: LeagueUser[] = [];\r\n            const users: LeagueUser[] = [];\r\n\r\n            for (const user of currentLeague.users) {\r\n                if (user.ids.length > 1) {\r\n                    mergedUsers.push(user);\r\n                } else {\r\n                    users.push(user);\r\n                }\r\n            }\r\n\r\n            for (const combination of mergedUsers) {\r\n                const leagueUsers = users.filter((user) => {\r\n                    return combination.ids.includes(user.ids.toString());\r\n                });\r\n\r\n                result.push([...leagueUsers]);\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    const initiallyMergedUsers = generateInitialMergedUsers();\r\n    const isEditingLeague = !!initiallyMergedUsers.length;\r\n\r\n    const [selectedUsers, setSelectedUsers] = React.useState<LeagueUser[]>([]);\r\n    const [primaryUser, setPrimaryUser] = React.useState<LeagueUser | null>(null);\r\n    const [mergedUsers, setMergedusers] = React.useState<LeagueUser[][]>(initiallyMergedUsers);\r\n    const [mergedUsersBeingEdited, setMergedUsersBeingEdited] = React.useState<LeagueUser[] | null>(\r\n        null\r\n    );\r\n    const isEditingFinalUsers = mergedUsersBeingEdited !== null;\r\n    const { showBanner } = useBanner();\r\n\r\n    function handleSelectedUsersClick(leagueUser: LeagueUser) {\r\n        const userIdsString = leagueUser.ids.toString();\r\n        const selectedLeagueUsersString = selectedUsers.map((user) => user.ids.toString());\r\n\r\n        if (selectedLeagueUsersString.includes(userIdsString)) {\r\n            setSelectedUsers((prev) => {\r\n                return prev.filter((user) => {\r\n                    return user.ids.toString() !== userIdsString;\r\n                });\r\n            });\r\n        } else {\r\n            setSelectedUsers((prev) => {\r\n                return [...prev, leagueUser];\r\n            });\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (!primaryUser && selectedUsers.length > 0) {\r\n            setPrimaryUser(selectedUsers[0]);\r\n        } else if (\r\n            // if a primary user is selected and it is not in the selected users, then remove the primary user\r\n            primaryUser &&\r\n            !selectedUsers.map((user) => user.ids.toString()).includes(primaryUser.ids.toString())\r\n        ) {\r\n            setPrimaryUser(selectedUsers.length > 0 ? { ...selectedUsers[0] } : null);\r\n        }\r\n    }, [selectedUsers]);\r\n\r\n    if (!currentLeague) {\r\n        return (\r\n            <div className=\"container\">\r\n                <p>You have not registered the league {slug}</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const sortedSelectedUsers = sortSelectedUsers(selectedUsers, primaryUser);\r\n    if (isMergedAndValid || currentLeague.platform !== 'merged') {\r\n        if (isMergedAndValid) {\r\n            if (!league1?.users || !league2?.users) return <ErrorMessage slug={slug} />;\r\n        } else if (currentLeague.platform !== 'merged') {\r\n            league1 = currentLeague;\r\n            if (!league1?.users) return <ErrorMessage slug={slug} />;\r\n        }\r\n\r\n        const isSortedSelectedUsersTheSameBeingEdited = () => {\r\n            if (!mergedUsersBeingEdited) return false;\r\n\r\n            return JSON.stringify(mergedUsersBeingEdited) === JSON.stringify(sortedSelectedUsers);\r\n        };\r\n\r\n        return (\r\n            <MergeLeaguesLayout\r\n                slug={currentSlug}\r\n                onClick={async () => {\r\n                    let mergedUsersCompiled = mergedUsers.map((users) => {\r\n                        return {\r\n                            name: users[0].name,\r\n                            ids: users.reduce((acc, curr) => [...acc, ...curr.ids], [] as string[]),\r\n                        };\r\n                    });\r\n\r\n                    if (currentLeague.platform !== 'merged' && league1) {\r\n                        const baseUsers = (league1.users as LeagueUser[]).filter(\r\n                            (user) => user.ids.length === 1\r\n                        );\r\n\r\n                        mergedUsersCompiled = [...baseUsers, ...mergedUsersCompiled];\r\n                    }\r\n\r\n                    await updateLeague(currentLeague.id, {\r\n                        users: mergedUsersCompiled,\r\n                    });\r\n\r\n                    showBanner({\r\n                        type: 'success',\r\n                        text: 'Success!',\r\n                    });\r\n                }}\r\n                buttonLabel={isEditingLeague ? 'Save Changes' : 'Merge'}\r\n            >\r\n                {league1 && (\r\n                    <LeagueCol\r\n                        onUserClick={handleSelectedUsersClick}\r\n                        selectedUsers={selectedUsers}\r\n                        league={league1}\r\n                        mergedUsers={mergedUsers}\r\n                        mergedUsersBeingEdited={mergedUsersBeingEdited}\r\n                    />\r\n                )}\r\n                {league2 && (\r\n                    <LeagueCol\r\n                        onUserClick={handleSelectedUsersClick}\r\n                        selectedUsers={selectedUsers}\r\n                        league={league2}\r\n                        mergedUsers={mergedUsers}\r\n                        mergedUsersBeingEdited={mergedUsersBeingEdited}\r\n                    />\r\n                )}\r\n                <div className=\"merge-leagues-column\">\r\n                    <h3 className=\"merge-leagues-column__title\">Selected Users</h3>\r\n                    <p className=\"px-2\">Primary</p>\r\n                    <ul className=\"merge-leagues-column__list\">\r\n                        {selectedUsers.map((user, i) => {\r\n                            return (\r\n                                <li key={i} className=\"relative merge-leagues-column__list-item\">\r\n                                    <button\r\n                                        className=\"flex items-center merge-leagues-column__list-item-button\"\r\n                                        onClick={() => setPrimaryUser(user)}\r\n                                    >\r\n                                        <div\r\n                                            className={`w-3 h-3 rounded-full mr-14\r\n                                            ${\r\n                                                primaryUser?.ids.toString() === user.ids.toString()\r\n                                                    ? 'bg-primary-500'\r\n                                                    : 'bg-gray-500'\r\n                                            }\r\n                                        `}\r\n                                        />\r\n                                        {user.name}\r\n                                    </button>\r\n                                    <button\r\n                                        className=\"absolute flex items-center justify-center w-4 h-4 pb-0.5 text-sm text-white -translate-y-1/2 border border-white rounded top-1/2 right-2 bg-danger-500\"\r\n                                        aria-label=\"Delete from selected users\"\r\n                                        onClick={() => {\r\n                                            setSelectedUsers((prev) => {\r\n                                                return prev.filter((u) => {\r\n                                                    return u.ids.toString() !== user.ids.toString();\r\n                                                });\r\n                                            });\r\n                                        }}\r\n                                    >\r\n                                        <span>x</span>\r\n                                    </button>\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                    <div className=\"px-2 mt-auto\">\r\n                        <button\r\n                            className=\"w-full base-button\"\r\n                            disabled={\r\n                                selectedUsers.length < 2 ||\r\n                                isSortedSelectedUsersTheSameBeingEdited()\r\n                            }\r\n                            onClick={() => {\r\n                                setSelectedUsers([]);\r\n                                if (isEditingFinalUsers) {\r\n                                    setMergedusers((prev) => {\r\n                                        return [...prev, sortedSelectedUsers].filter(\r\n                                            (userGroup) => {\r\n                                                return (\r\n                                                    JSON.stringify(userGroup) !==\r\n                                                    JSON.stringify(mergedUsersBeingEdited)\r\n                                                );\r\n                                            }\r\n                                        );\r\n                                    });\r\n                                } else {\r\n                                    setMergedusers((prev) => {\r\n                                        return [...prev, sortedSelectedUsers];\r\n                                    });\r\n                                }\r\n                                setMergedUsersBeingEdited(null);\r\n                            }}\r\n                        >\r\n                            {isEditingFinalUsers ? 'Save Changes' : 'Merge Users'}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"merge-leagues-column\">\r\n                    <h3 className=\"merge-leagues-column__title\">Final Users</h3>\r\n                    <ul className=\"merge-leagues-column__list\">\r\n                        {mergedUsers.map((userGroup, i) => {\r\n                            return (\r\n                                <li key={i} className=\"relative merge-leagues-column__list-item\">\r\n                                    <button\r\n                                        className=\"flex items-center merge-leagues-column__list-item-button\"\r\n                                        onClick={() => {\r\n                                            // if this is the currentlybiengedited group make selectedusers null and set the mergedusersbeingedited to null\r\n                                            // else make the userGroup the selectedUsers\r\n                                            const isCurrentlyBeingEdited = mergedUsersBeingEdited\r\n                                                ? userGroup.every((user) => {\r\n                                                      return mergedUsersBeingEdited\r\n                                                          .map((u) => u.ids.toString())\r\n                                                          .includes(user.ids.toString());\r\n                                                  })\r\n                                                : false;\r\n\r\n                                            if (isCurrentlyBeingEdited) {\r\n                                                setSelectedUsers([]);\r\n                                                setMergedUsersBeingEdited(null);\r\n                                            } else {\r\n                                                setSelectedUsers(userGroup);\r\n                                                setMergedUsersBeingEdited(userGroup);\r\n                                            }\r\n                                        }}\r\n                                    >\r\n                                        <ul className=\"w-full p-2 bg-gray-100 rounded\">\r\n                                            {userGroup.map((user, j) => {\r\n                                                return (\r\n                                                    <li\r\n                                                        key={j}\r\n                                                        className={`flex items-center ${\r\n                                                            j === 0\r\n                                                                ? 'text-primary-500 font-semibold'\r\n                                                                : ''\r\n                                                        }`}\r\n                                                    >\r\n                                                        {user.name}\r\n                                                    </li>\r\n                                                );\r\n                                            })}\r\n                                        </ul>\r\n                                    </button>\r\n                                    <button\r\n                                        className=\"absolute flex items-center justify-center w-4 h-4 pb-0.5 text-sm text-white -translate-y-1/2 border border-white rounded top-6 right-4 bg-danger-500\"\r\n                                        aria-label=\"Delete from merged users\"\r\n                                        onClick={() => {\r\n                                            setMergedusers((prev) => {\r\n                                                return prev.filter((u) => {\r\n                                                    return (\r\n                                                        u\r\n                                                            .map((user) => user.ids.toString())\r\n                                                            .join(',') !==\r\n                                                        userGroup\r\n                                                            .map((user) => user.ids.toString())\r\n                                                            .join(',')\r\n                                                    );\r\n                                                });\r\n                                            });\r\n\r\n                                            // if the userGroup is the one being edited, clear the selected users and make the editing null\r\n                                            if (\r\n                                                mergedUsersBeingEdited &&\r\n                                                mergedUsersBeingEdited\r\n                                                    .map((user) => user.ids.toString())\r\n                                                    .join(',') ===\r\n                                                    userGroup\r\n                                                        .map((user) => user.ids.toString())\r\n                                                        .join(',')\r\n                                            ) {\r\n                                                setSelectedUsers([]);\r\n                                                setMergedUsersBeingEdited(null);\r\n                                            }\r\n                                        }}\r\n                                    >\r\n                                        <span>x</span>\r\n                                    </button>\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </MergeLeaguesLayout>\r\n        );\r\n    } else {\r\n        return <ErrorMessage slug={slug} />;\r\n    }\r\n};\r\n\r\nexport default MergeLeagues;\r\n","import React from 'react';\r\nimport { Router } from '@reach/router';\r\nimport Dashboard from '../app/Dashboard';\r\nimport AppNavbar from '../components/AppNavbar';\r\nimport PrivateRoute from '../components/PrivateRoute';\r\nimport { APP_ROUTES } from '../constants';\r\nimport EmailCodes from '../app/EmailCodes';\r\nimport MergeLeagues from '../app/MergeLeagues';\r\n\r\nconst App = () => {\r\n    return (\r\n        <>\r\n            <AppNavbar />\r\n            <main className=\"pt-3 app-container\">\r\n                <Router>\r\n                    <PrivateRoute component={Dashboard} path={APP_ROUTES.DASHBOARD} />\r\n                    <EmailCodes path={APP_ROUTES.AUTH_CODES} />\r\n                    <PrivateRoute\r\n                        component={MergeLeagues}\r\n                        path={APP_ROUTES.MERGE_LEAGUES + '/:slug'}\r\n                    />\r\n                </Router>\r\n            </main>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"names":["addToUnscopables","logoPositionClass","left","center","none","MessageCard","_ref","logoPosition","alert","children","React","className","src","Logo","alt","height","content","type","DialogModal","isOpened","onProceed","onClose","rest","ref","useRef","handler","useEffect","listener","event","rect","current","getBoundingClientRect","top","clientY","clientX","width","document","addEventListener","removeEventListener","useOnClickOutside","showModal","body","classList","add","close","remove","preventAutoClose","e","stopPropagation","Object","assign","onCancel","onClick","onSubmit","EditLeagueForm","league","onEditEnd","alertMessage","setAlertMessage","updateLeague","useLeagueStore","state","config","convertIntoComposedObject","LeagueForm","title","async","values","initialValues","convertIntoFlatObject","changedValues","getChangedValues","email","name","id","err","message","standalone","localAlertText","AddAndClaimLeagueForm","firebase","getFirebase","error","setError","createLeague","canLeagueBeClaimed","user","useUserStore","claimLeague","setClaimLeague","show","formState","leagueid","platform","sendNotification","uid","userId","createdAt","firestore","Timestamp","fromDate","Date","_config$slug","disabled","setDisabled","errorMessage","setErrorMessage","preventDefault","leagueData","slug","target","elements","value","consolationGames","status","length","htmlFor","required","pattern","defaultValue","initialValue","CreateMergedLeagueForm","league1","league2","getLeagues","MergeLeaguesForm","partialMergedLeague","mergedLeague","generateMergedLeagueId","leagues","services","displayName","generateDocumentLeagueId","EditMergedLeagueForm","keys","Error","thClasses","tdClasses","showAddLeagueForm","isModalOpen","setIsModalOpen","selectedLeague","setSelectedLeague","mergedLeagueToEdit","setMergedLeagueToEdit","isMergeModalOpen","setIsMergeModalOpen","isAddLeagueModalOpen","setIsAddLeagueModalOpen","leaguesToMerge","setLeaguesToMerge","onCloseAddLeagueModal","window","newUrl","location","href","replace","history","replaceState","onCloseMergeModal","URLSearchParams","search","get","sortedLeagues","sort","a","b","seconds","map","i","key","checked","some","item","onChange","filter","newLeaguesToMerge","_toConsumableArray","shift","push","concat","handleLeagueClick","platformsOptions","label","handleEdit","navigate","APP_ROUTES","Dashboard","useLocation","LeaguesTable","AppNavbar","logOut","loading","Link","to","VerifyEmail","sendVerificationEmail","setMessage","Loading","component","Component","userLoading","leaguesLoading","console","log","pathname","emailVerified","mode","undefined","oobCode","EmailCodes","applyPasswordResetCode","applyVerificationCode","verifyEmail","newPassword","password","minLength","sortSelectedUsers","selectedUsers","primaryUser","sortedUsers","ids","toString","unshift","ErrorMessage","MergeLeaguesLayout","_ref2","buttonLabel","LeagueCol","_ref3","_league$users","_filteredUsers","_filteredLeague$users","onUserClick","mergedUsers","mergedUsersBeingEdited","filteredUsers","users","flat","includes","filteredLeague","MergeLeagues","useParams","currentSlug","currentLeague","find","isMergedAndValid","league1Id","league2Id","initiallyMergedUsers","result","combination","league1Users","league2Users","leagueUsers","generateInitialMergedUsers","isEditingLeague","setSelectedUsers","setPrimaryUser","setMergedusers","setMergedUsersBeingEdited","isEditingFinalUsers","showBanner","useBanner","handleSelectedUsersClick","leagueUser","userIdsString","prev","sortedSelectedUsers","_league","_league2","_league3","isSortedSelectedUsersTheSameBeingEdited","JSON","stringify","mergedUsersCompiled","reduce","acc","curr","baseUsers","text","u","userGroup","every","j","join","App","Router","PrivateRoute","path"],"sourceRoot":""}